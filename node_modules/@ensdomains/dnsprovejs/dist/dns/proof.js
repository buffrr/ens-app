'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Proof = function () {
  /**
   * @constructor
   * @param {string} name
   * @param {string} type
   * @param {string} sig
   * @param {number} inception
   * @param {string} sigwire
   * @param {string} rrdata
   */
  function Proof(name, type, sig, inception, sigwire, rrdata) {
    _classCallCheck(this, Proof);

    this.name = name;
    this.type = type;
    this.sig = sig;
    this.inception = inception;
    this.sigwire = sigwire;
    this.rrdata = rrdata;
    this.sigwiredata = Buffer.concat([sigwire, rrdata]);
  }

  _createClass(Proof, [{
    key: 'toConcat',
    value: function toConcat() {
      var sigwiredatalength = new Buffer(2);
      var siglength = new Buffer(2);
      sigwiredatalength.writeInt16BE(this.sigwiredata.length, 0);
      siglength.writeInt16BE(this.sig.length, 0);
      return Buffer.concat([sigwiredatalength, this.sigwiredata, siglength, this.sig]);
    }

    /**
     * toSubmit returns an array consisting of hex string of sigwiredata (concatinatd string of sigwire and rrdata) and its signature
     * @returns {array} data
     */

  }, {
    key: 'toSubmit',
    value: function toSubmit() {
      return ['0x' + this.sigwiredata.toString('hex'), '0x' + this.sig.toString('hex')];
    }
  }]);

  return Proof;
}();

module.exports = Proof;