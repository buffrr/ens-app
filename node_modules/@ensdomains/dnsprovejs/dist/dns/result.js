'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var packet = require('dns-packet');
var Proof = require('./proof');
var DnsResult = require('./dns_result');

function _display(r) {
  var header = [r.name, r.ttl, r.class, r.type];
  var data = Object.values(r.data);
  var row = header.concat(data);
  var type;
  row.unshift('//');
  switch (r.type) {
    case 'DNSKEY':
      type = 'base64';
      break;
    case 'RRSIG':
      type = 'base64';
      break;
    case 'DS':
      type = 'hex';
      break;
    default:
      break;
  }
  row[row.length - 1] = row[row.length - 1].toString(type);
  return row.join('\t');
}

function buildProofs(results) {
  return results.map(function (result) {
    var _pack = pack(result.rrs, result.sig),
        _pack2 = _slicedToArray(_pack, 2),
        sigwire = _pack2[0],
        rrdata = _pack2[1];

    var name = result.name;
    return new Proof(name, result.rrs[0].type, result.sig.data.signature, result.sig.data.inception, sigwire, rrdata);
  });
}

function pack(rrset, sig) {
  var lengthField = 2;
  var s1 = Object.assign({}, sig.data, { signature: new Buffer(0) });
  s1.signature = new Buffer(0);
  var sigEncoded = packet.rrsig.encode(s1);
  var sigwire = sigEncoded.slice(lengthField);
  var rrdata = rawSignatureData(rrset, sig);
  return [sigwire, rrdata];
}

function rawSignatureData(rrset, sig) {
  var encoded = rrset.map(function (r) {
    // https://tools.ietf.org/html/rfc4034#section-6
    var r1 = Object.assign(r, {
      name: r.name.toLowerCase(), // (2)
      ttl: sig.data.originalTTL // (5)
    });
    return packet.answer.encode(r1);
  }).sort(function (a, b) {
    return a.compare(b);
  });
  return Buffer.concat(encoded);
}

var Result = function () {
  function Result(results) {
    _classCallCheck(this, Result);

    var found = void 0,
        nsec = void 0,
        proofs = void 0,
        lastProof = void 0;
    found = false;
    nsec = false;
    if (results && results.length > 0) {
      results = results;
      proofs = buildProofs(results);
      lastProof = '0x' + proofs[proofs.length - 1].rrdata.toString('hex');
      var lastResult = results[results.length - 1];
      var lastResultType = void 0;
      if (lastResult.rrs[0]) {
        lastResultType = lastResult.rrs[0].type;
      }
      if (lastResultType == 'NSEC' || lastResultType == 'NSEC3') {
        nsec = true;
      } else {
        found = true;
      }
    }
    return new DnsResult({ found: found, nsec: nsec, results: results, proofs: proofs, lastProof: lastProof });
  }

  _createClass(Result, [{
    key: 'display',
    value: function display() {
      return this.results.map(function (result) {
        var row = [_display(result.sig)];
        result.rrs.forEach(function (r) {
          row.push(_display(r));
        });
        return row;
      });
    }
  }]);

  return Result;
}();

module.exports = Result;