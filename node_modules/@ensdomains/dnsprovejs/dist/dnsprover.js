"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

require('idempotent-babel-polyfill');
var Oracle = require("./oracle/oracle");
var Result = require("./dns/result");
var Verifier = require("./dns/verifier");

var DnsProver = function () {
  function DnsProver(provider) {
    _classCallCheck(this, DnsProver);

    this.provider = provider;
  }

  /**
   * lookup takes DNS record type and name and returns `DnsResult` object.
   *
   * @param {string} type - eg: TXT
   * @param {string} query - eg: _ens.yourdomain.xyz
   * @returns {Object} DnsResult - contains list of results retrieved from DNS record and proofs which are constructed from the record and used to submit into DNSSEC Oracle
   */


  _createClass(DnsProver, [{
    key: "lookup",
    value: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(type, query) {
        var result;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return Verifier.queryWithProof(type, query);

              case 2:
                result = _context.sent;
                return _context.abrupt("return", new Result(result));

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function lookup(_x, _x2) {
        return _ref.apply(this, arguments);
      }

      return lookup;
    }()

    /**
     * getOracle returns Oracle object
     *
     * @param {string} address - DNSSEC Oracle contract address
     * @returns {Object} Oracle - allows you to call DNSSEC oracle functions
     *
     */

  }, {
    key: "getOracle",
    value: function getOracle(address) {
      return new Oracle(this.provider, address);
    }
  }]);

  return DnsProver;
}();

module.exports = DnsProver;