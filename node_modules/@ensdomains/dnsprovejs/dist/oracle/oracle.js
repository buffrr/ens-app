'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var artifact = require('@ensdomains/contracts/abis/dnssec-oracle/DNSSECImpl.json');
var Web3 = require('web3');
var abi = artifact.abi;
var packet = require('dns-packet');
var types = require('dns-packet/types');
var OracleProof = require('./oracle_proof');
function hexEncodeName(name) {
  return '0x' + packet.name.encode(name).toString('hex');
}

var Oracle = function () {
  /**
   *
   * @param {Object} provider - eg: web3.currentProvider
   * @param {string} address
   */
  function Oracle(provider, address) {
    _classCallCheck(this, Oracle);

    this.provider = provider;
    this.address = address;
    this.web3 = new Web3(provider);
    this.contract = new this.web3.eth.Contract(abi, address);
  }

  /**
   * kownProof
   * @param {Object} proof
   * @param {string} proof.name - eg 'ethlab.xyz'
   * @param {type} proof.type - eg 'TXT'
   * @returns {Object} oracle_proof - contains list of results retrieved from DNS record and proofs
   */


  _createClass(Oracle, [{
    key: 'knownProof',
    value: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(proof) {
        var name, type, result, inception, inserted, hash, validInception, toProve;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                name = hexEncodeName(proof.name);
                type = types.toType(proof.type);
                _context.next = 4;
                return this.contract.methods.rrdata(type, name).call();

              case 4:
                result = _context.sent;
                inception = result[0];
                inserted = result[1];
                hash = result[2];
                validInception = inception <= proof.inception;
                toProve = void 0;

                if (proof.rrdata) {
                  toProve = this.web3.utils.sha3('0x' + proof.rrdata.toString('hex'), { encoding: 'hex' }).slice(0, 42);
                }

                return _context.abrupt('return', new OracleProof({
                  inception: inception,
                  inserted: inserted,
                  hash: hash,
                  hashToProve: toProve,
                  validInception: validInception,
                  matched: validInception && hash === toProve
                }));

              case 12:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function knownProof(_x) {
        return _ref.apply(this, arguments);
      }

      return knownProof;
    }()

    /**
     * submitProof submits a proof to Oracle contract.
     * If `prevProof` is `null`, the oracle contract uses hard-coded root anchor proof to validate the validity of the proof given.
     * `params` is used to pass any params to be sent to transaction, such as `{from:address}`.
     * @param {Object} proof
     * @param {Object} prevProof
     * @param {Object} params - from, gas, gasPrice, etc
     * @returns {boolean} success - returns true unless transaction fails
     */

  }, {
    key: 'submitProof',
    value: function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(proof, prevProof, params) {
        var _contract$methods;

        var rrdata;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                rrdata = proof.toSubmit(proof);

                if (prevProof) {
                  _context2.next = 7;
                  break;
                }

                _context2.next = 4;
                return this.contract.methods.anchors().call();

              case 4:
                prevProof = _context2.sent;
                _context2.next = 8;
                break;

              case 7:
                prevProof = '0x' + prevProof.rrdata.toString('hex');

              case 8:

                rrdata.push(prevProof);
                _context2.next = 11;
                return (_contract$methods = this.contract.methods).submitRRSet.apply(_contract$methods, _toConsumableArray(rrdata)).send(params);

              case 11:
                return _context2.abrupt('return', true);

              case 12:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function submitProof(_x2, _x3, _x4) {
        return _ref2.apply(this, arguments);
      }

      return submitProof;
    }()

    /**
     * deleteProof deletes a proof
     * @param {string} type - eg: TXT
     * @param {string} name - eg: _ens.matoken.xyz
     * @param {string} proof
     * @param {string} prevProof
     * @param {Object} params - from, gas, gasPrice, etc
     */

  }, {
    key: 'deleteProof',
    value: function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(type, name, proof, prevProof, params) {
        var rrdata, proofdata, res;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                rrdata = proof.toSubmit(proof);
                proofdata = '0x' + prevProof.rrdata.toString('hex');
                _context3.next = 4;
                return this.contract.methods.deleteRRSet(types.toType(type), hexEncodeName(name), rrdata[0], rrdata[1], proofdata).send(params);

              case 4:
                res = _context3.sent;

              case 5:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function deleteProof(_x5, _x6, _x7, _x8, _x9) {
        return _ref3.apply(this, arguments);
      }

      return deleteProof;
    }()
  }, {
    key: 'toProve',
    value: function toProve(proof) {
      return this.web3.utils.sha3(proof.rrdata).slice(0, 42);
    }

    /**
     * getAllProofs returns all the proofs needs to be submitted into DNSSEC Oracle.
     * It traverses from the leaf of the chain of proof to check if proof in DNSSEC Oracle
     * and the one from DNS record matches with valid inception value.
     * This function is used so that it can pass the necessary proof to `dnsregistrar.proveAndClaim` function.
     *
     * @param {Object} result
     * @returns {string} data
     * @returns {Object} prevProof
     */

  }, {
    key: 'getAllProofs',
    value: function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(result) {
        var proofs, proven, rrdata, prevProof, i, data;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                proofs = result.proofs;
                _context4.next = 3;
                return this.getProven(result);

              case 3:
                proven = _context4.sent;
                rrdata = [];
                prevProof = void 0;

                for (i = proven; i < proofs.length; i++) {
                  rrdata.push(proofs[i].toConcat());
                }

                if (!(proven == 0)) {
                  _context4.next = 13;
                  break;
                }

                _context4.next = 10;
                return this.contract.methods.anchors().call();

              case 10:
                prevProof = _context4.sent;
                _context4.next = 14;
                break;

              case 13:
                prevProof = '0x' + proofs[proven - 1].rrdata.toString('hex');

              case 14:
                data = '0x' + Buffer.concat(rrdata).toString('hex');
                return _context4.abrupt('return', [data, prevProof]);

              case 16:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function getAllProofs(_x10) {
        return _ref4.apply(this, arguments);
      }

      return getAllProofs;
    }()

    /**
     * submitAll submits all required proofs into the DNSSEC oracle as one transaction in a batch.
     * @param {Object} result
     * @param {Object} params - from, gas, gasPrice, etc
     */

  }, {
    key: 'submitAll',
    value: function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(result, params) {
        var _contract$methods2;

        var data;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this.getAllProofs(result);

              case 2:
                data = _context5.sent;
                _context5.next = 5;
                return (_contract$methods2 = this.contract.methods).submitRRSets.apply(_contract$methods2, _toConsumableArray(data)).send(params);

              case 5:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function submitAll(_x11, _x12) {
        return _ref5.apply(this, arguments);
      }

      return submitAll;
    }()
  }, {
    key: 'allProven',
    value: function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(result) {
        var proven;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this.getProven(result);

              case 2:
                proven = _context6.sent;
                return _context6.abrupt('return', proven == result.proofs.length);

              case 4:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function allProven(_x13) {
        return _ref6.apply(this, arguments);
      }

      return allProven;
    }()
  }, {
    key: 'getProven',
    value: function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(result) {
        var i, minInserted, proof, proven;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                if (result.found) {
                  _context7.next = 2;
                  break;
                }

                return _context7.abrupt('return', { error: 'dns record not found' });

              case 2:
                i = void 0;
                i = result.proofs.length - 1;

              case 4:
                if (!(i >= 0)) {
                  _context7.next = 15;
                  break;
                }

                minInserted = Date.now() / 1000 - Math.min.apply(Math, _toConsumableArray(result.results[i].rrs.map(function (rr) {
                  return rr.ttl;
                })));
                proof = result.proofs[i];
                _context7.next = 9;
                return this.knownProof(proof);

              case 9:
                proven = _context7.sent;

                if (!(proven.matched && proven.inserted > minInserted)) {
                  _context7.next = 12;
                  break;
                }

                return _context7.abrupt('break', 15);

              case 12:
                i--;
                _context7.next = 4;
                break;

              case 15:
                return _context7.abrupt('return', i + 1);

              case 16:
              case 'end':
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function getProven(_x14) {
        return _ref7.apply(this, arguments);
      }

      return getProven;
    }()
  }]);

  return Oracle;
}();

module.exports = Oracle;