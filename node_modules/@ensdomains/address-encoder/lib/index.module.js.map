{"version":3,"file":"index.module.js","sources":["../node_modules/big-integer/BigInteger.js","../src/leb128/unsigned.ts","../src/filecoin/address.ts","../src/filecoin/index.ts","../src/flow/index.ts","../src/groestl-hash-js/op.js","../src/groestl-hash-js/helper.js","../src/groestl-hash-js/groestl.js","../src/monero/xmr-base58.ts","../src/nimq/index.ts","../src/index.ts","../src/groestl-hash-js/index.js"],"sourcesContent":["var bigInt = (function (undefined) {\r\n    \"use strict\";\r\n\r\n    var BASE = 1e7,\r\n        LOG_BASE = 7,\r\n        MAX_INT = 9007199254740992,\r\n        MAX_INT_ARR = smallToArray(MAX_INT),\r\n        LOG_MAX_INT = Math.log(MAX_INT);\r\n\r\n    function Integer(v, radix) {\r\n        if (typeof v === \"undefined\") return Integer[0];\r\n        if (typeof radix !== \"undefined\") return +radix === 10 ? parseValue(v) : parseBase(v, radix);\r\n        return parseValue(v);\r\n    }\r\n\r\n    function BigInteger(value, sign) {\r\n        this.value = value;\r\n        this.sign = sign;\r\n        this.isSmall = false;\r\n    }\r\n    BigInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function SmallInteger(value) {\r\n        this.value = value;\r\n        this.sign = value < 0;\r\n        this.isSmall = true;\r\n    }\r\n    SmallInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function isPrecise(n) {\r\n        return -MAX_INT < n && n < MAX_INT;\r\n    }\r\n\r\n    function smallToArray(n) { // For performance reasons doesn't reference BASE, need to change this function if BASE changes\r\n        if (n < 1e7)\r\n            return [n];\r\n        if (n < 1e14)\r\n            return [n % 1e7, Math.floor(n / 1e7)];\r\n        return [n % 1e7, Math.floor(n / 1e7) % 1e7, Math.floor(n / 1e14)];\r\n    }\r\n\r\n    function arrayToSmall(arr) { // If BASE changes this function may need to change\r\n        trim(arr);\r\n        var length = arr.length;\r\n        if (length < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {\r\n            switch (length) {\r\n                case 0: return 0;\r\n                case 1: return arr[0];\r\n                case 2: return arr[0] + arr[1] * BASE;\r\n                default: return arr[0] + (arr[1] + arr[2] * BASE) * BASE;\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    function trim(v) {\r\n        var i = v.length;\r\n        while (v[--i] === 0);\r\n        v.length = i + 1;\r\n    }\r\n\r\n    function createArray(length) { // function shamelessly stolen from Yaffle's library https://github.com/Yaffle/BigInteger\r\n        var x = new Array(length);\r\n        var i = -1;\r\n        while (++i < length) {\r\n            x[i] = 0;\r\n        }\r\n        return x;\r\n    }\r\n\r\n    function truncate(n) {\r\n        if (n > 0) return Math.floor(n);\r\n        return Math.ceil(n);\r\n    }\r\n\r\n    function add(a, b) { // assumes a and b are arrays with a.length >= b.length\r\n        var l_a = a.length,\r\n            l_b = b.length,\r\n            r = new Array(l_a),\r\n            carry = 0,\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l_b; i++) {\r\n            sum = a[i] + b[i] + carry;\r\n            carry = sum >= base ? 1 : 0;\r\n            r[i] = sum - carry * base;\r\n        }\r\n        while (i < l_a) {\r\n            sum = a[i] + carry;\r\n            carry = sum === base ? 1 : 0;\r\n            r[i++] = sum - carry * base;\r\n        }\r\n        if (carry > 0) r.push(carry);\r\n        return r;\r\n    }\r\n\r\n    function addAny(a, b) {\r\n        if (a.length >= b.length) return add(a, b);\r\n        return add(b, a);\r\n    }\r\n\r\n    function addSmall(a, carry) { // assumes a is array, carry is number with 0 <= carry < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l; i++) {\r\n            sum = a[i] - base + carry;\r\n            carry = Math.floor(sum / base);\r\n            r[i] = sum - carry * base;\r\n            carry += 1;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall) {\r\n            return new BigInteger(addSmall(a, Math.abs(b)), this.sign);\r\n        }\r\n        return new BigInteger(addAny(a, b), this.sign);\r\n    };\r\n    BigInteger.prototype.plus = BigInteger.prototype.add;\r\n\r\n    SmallInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            if (isPrecise(a + b)) return new SmallInteger(a + b);\r\n            b = smallToArray(Math.abs(b));\r\n        }\r\n        return new BigInteger(addSmall(b, Math.abs(a)), a < 0);\r\n    };\r\n    SmallInteger.prototype.plus = SmallInteger.prototype.add;\r\n\r\n    function subtract(a, b) { // assumes a and b are arrays with a >= b\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            r = new Array(a_l),\r\n            borrow = 0,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < b_l; i++) {\r\n            difference = a[i] - borrow - b[i];\r\n            if (difference < 0) {\r\n                difference += base;\r\n                borrow = 1;\r\n            } else borrow = 0;\r\n            r[i] = difference;\r\n        }\r\n        for (i = b_l; i < a_l; i++) {\r\n            difference = a[i] - borrow;\r\n            if (difference < 0) difference += base;\r\n            else {\r\n                r[i++] = difference;\r\n                break;\r\n            }\r\n            r[i] = difference;\r\n        }\r\n        for (; i < a_l; i++) {\r\n            r[i] = a[i];\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function subtractAny(a, b, sign) {\r\n        var value;\r\n        if (compareAbs(a, b) >= 0) {\r\n            value = subtract(a, b);\r\n        } else {\r\n            value = subtract(b, a);\r\n            sign = !sign;\r\n        }\r\n        value = arrayToSmall(value);\r\n        if (typeof value === \"number\") {\r\n            if (sign) value = -value;\r\n            return new SmallInteger(value);\r\n        }\r\n        return new BigInteger(value, sign);\r\n    }\r\n\r\n    function subtractSmall(a, b, sign) { // assumes a is array, b is number with 0 <= b < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            carry = -b,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < l; i++) {\r\n            difference = a[i] + carry;\r\n            carry = Math.floor(difference / base);\r\n            difference %= base;\r\n            r[i] = difference < 0 ? difference + base : difference;\r\n        }\r\n        r = arrayToSmall(r);\r\n        if (typeof r === \"number\") {\r\n            if (sign) r = -r;\r\n            return new SmallInteger(r);\r\n        } return new BigInteger(r, sign);\r\n    }\r\n\r\n    BigInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall)\r\n            return subtractSmall(a, Math.abs(b), this.sign);\r\n        return subtractAny(a, b, this.sign);\r\n    };\r\n    BigInteger.prototype.minus = BigInteger.prototype.subtract;\r\n\r\n    SmallInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            return new SmallInteger(a - b);\r\n        }\r\n        return subtractSmall(b, Math.abs(a), a >= 0);\r\n    };\r\n    SmallInteger.prototype.minus = SmallInteger.prototype.subtract;\r\n\r\n    BigInteger.prototype.negate = function () {\r\n        return new BigInteger(this.value, !this.sign);\r\n    };\r\n    SmallInteger.prototype.negate = function () {\r\n        var sign = this.sign;\r\n        var small = new SmallInteger(-this.value);\r\n        small.sign = !sign;\r\n        return small;\r\n    };\r\n\r\n    BigInteger.prototype.abs = function () {\r\n        return new BigInteger(this.value, false);\r\n    };\r\n    SmallInteger.prototype.abs = function () {\r\n        return new SmallInteger(Math.abs(this.value));\r\n    };\r\n\r\n    function multiplyLong(a, b) {\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            l = a_l + b_l,\r\n            r = createArray(l),\r\n            base = BASE,\r\n            product, carry, i, a_i, b_j;\r\n        for (i = 0; i < a_l; ++i) {\r\n            a_i = a[i];\r\n            for (var j = 0; j < b_l; ++j) {\r\n                b_j = b[j];\r\n                product = a_i * b_j + r[i + j];\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n                r[i + j + 1] += carry;\r\n            }\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function multiplySmall(a, b) { // assumes a is array, b is number with |b| < BASE\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            carry = 0,\r\n            product, i;\r\n        for (i = 0; i < l; i++) {\r\n            product = a[i] * b + carry;\r\n            carry = Math.floor(product / base);\r\n            r[i] = product - carry * base;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    function shiftLeft(x, n) {\r\n        var r = [];\r\n        while (n-- > 0) r.push(0);\r\n        return r.concat(x);\r\n    }\r\n\r\n    function multiplyKaratsuba(x, y) {\r\n        var n = Math.max(x.length, y.length);\r\n\r\n        if (n <= 30) return multiplyLong(x, y);\r\n        n = Math.ceil(n / 2);\r\n\r\n        var b = x.slice(n),\r\n            a = x.slice(0, n),\r\n            d = y.slice(n),\r\n            c = y.slice(0, n);\r\n\r\n        var ac = multiplyKaratsuba(a, c),\r\n            bd = multiplyKaratsuba(b, d),\r\n            abcd = multiplyKaratsuba(addAny(a, b), addAny(c, d));\r\n\r\n        var product = addAny(addAny(ac, shiftLeft(subtract(subtract(abcd, ac), bd), n)), shiftLeft(bd, 2 * n));\r\n        trim(product);\r\n        return product;\r\n    }\r\n\r\n    // The following function is derived from a surface fit of a graph plotting the performance difference\r\n    // between long multiplication and karatsuba multiplication versus the lengths of the two arrays.\r\n    function useKaratsuba(l1, l2) {\r\n        return -0.012 * l1 - 0.012 * l2 + 0.000015 * l1 * l2 > 0;\r\n    }\r\n\r\n    BigInteger.prototype.multiply = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value, b = n.value,\r\n            sign = this.sign !== n.sign,\r\n            abs;\r\n        if (n.isSmall) {\r\n            if (b === 0) return Integer[0];\r\n            if (b === 1) return this;\r\n            if (b === -1) return this.negate();\r\n            abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                return new BigInteger(multiplySmall(a, abs), sign);\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        if (useKaratsuba(a.length, b.length)) // Karatsuba is only faster for certain array sizes\r\n            return new BigInteger(multiplyKaratsuba(a, b), sign);\r\n        return new BigInteger(multiplyLong(a, b), sign);\r\n    };\r\n\r\n    BigInteger.prototype.times = BigInteger.prototype.multiply;\r\n\r\n    function multiplySmallAndArray(a, b, sign) { // a >= 0\r\n        if (a < BASE) {\r\n            return new BigInteger(multiplySmall(b, a), sign);\r\n        }\r\n        return new BigInteger(multiplyLong(b, smallToArray(a)), sign);\r\n    }\r\n    SmallInteger.prototype._multiplyBySmall = function (a) {\r\n        if (isPrecise(a.value * this.value)) {\r\n            return new SmallInteger(a.value * this.value);\r\n        }\r\n        return multiplySmallAndArray(Math.abs(a.value), smallToArray(Math.abs(this.value)), this.sign !== a.sign);\r\n    };\r\n    BigInteger.prototype._multiplyBySmall = function (a) {\r\n        if (a.value === 0) return Integer[0];\r\n        if (a.value === 1) return this;\r\n        if (a.value === -1) return this.negate();\r\n        return multiplySmallAndArray(Math.abs(a.value), this.value, this.sign !== a.sign);\r\n    };\r\n    SmallInteger.prototype.multiply = function (v) {\r\n        return parseValue(v)._multiplyBySmall(this);\r\n    };\r\n    SmallInteger.prototype.times = SmallInteger.prototype.multiply;\r\n\r\n    function square(a) {\r\n        //console.assert(2 * BASE * BASE < MAX_INT);\r\n        var l = a.length,\r\n            r = createArray(l + l),\r\n            base = BASE,\r\n            product, carry, i, a_i, a_j;\r\n        for (i = 0; i < l; i++) {\r\n            a_i = a[i];\r\n            carry = 0 - a_i * a_i;\r\n            for (var j = i; j < l; j++) {\r\n                a_j = a[j];\r\n                product = 2 * (a_i * a_j) + r[i + j] + carry;\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n            }\r\n            r[i + l] = carry;\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.square = function () {\r\n        return new BigInteger(square(this.value), false);\r\n    };\r\n\r\n    SmallInteger.prototype.square = function () {\r\n        var value = this.value * this.value;\r\n        if (isPrecise(value)) return new SmallInteger(value);\r\n        return new BigInteger(square(smallToArray(Math.abs(this.value))), false);\r\n    };\r\n\r\n    function divMod1(a, b) { // Left over from previous version. Performs faster than divMod2 on smaller input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            base = BASE,\r\n            result = createArray(b.length),\r\n            divisorMostSignificantDigit = b[b_l - 1],\r\n            // normalization\r\n            lambda = Math.ceil(base / (2 * divisorMostSignificantDigit)),\r\n            remainder = multiplySmall(a, lambda),\r\n            divisor = multiplySmall(b, lambda),\r\n            quotientDigit, shift, carry, borrow, i, l, q;\r\n        if (remainder.length <= a_l) remainder.push(0);\r\n        divisor.push(0);\r\n        divisorMostSignificantDigit = divisor[b_l - 1];\r\n        for (shift = a_l - b_l; shift >= 0; shift--) {\r\n            quotientDigit = base - 1;\r\n            if (remainder[shift + b_l] !== divisorMostSignificantDigit) {\r\n                quotientDigit = Math.floor((remainder[shift + b_l] * base + remainder[shift + b_l - 1]) / divisorMostSignificantDigit);\r\n            }\r\n            // quotientDigit <= base - 1\r\n            carry = 0;\r\n            borrow = 0;\r\n            l = divisor.length;\r\n            for (i = 0; i < l; i++) {\r\n                carry += quotientDigit * divisor[i];\r\n                q = Math.floor(carry / base);\r\n                borrow += remainder[shift + i] - (carry - q * base);\r\n                carry = q;\r\n                if (borrow < 0) {\r\n                    remainder[shift + i] = borrow + base;\r\n                    borrow = -1;\r\n                } else {\r\n                    remainder[shift + i] = borrow;\r\n                    borrow = 0;\r\n                }\r\n            }\r\n            while (borrow !== 0) {\r\n                quotientDigit -= 1;\r\n                carry = 0;\r\n                for (i = 0; i < l; i++) {\r\n                    carry += remainder[shift + i] - base + divisor[i];\r\n                    if (carry < 0) {\r\n                        remainder[shift + i] = carry + base;\r\n                        carry = 0;\r\n                    } else {\r\n                        remainder[shift + i] = carry;\r\n                        carry = 1;\r\n                    }\r\n                }\r\n                borrow += carry;\r\n            }\r\n            result[shift] = quotientDigit;\r\n        }\r\n        // denormalization\r\n        remainder = divModSmall(remainder, lambda)[0];\r\n        return [arrayToSmall(result), arrayToSmall(remainder)];\r\n    }\r\n\r\n    function divMod2(a, b) { // Implementation idea shamelessly stolen from Silent Matt's library http://silentmatt.com/biginteger/\r\n        // Performs faster than divMod1 on larger input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            result = [],\r\n            part = [],\r\n            base = BASE,\r\n            guess, xlen, highx, highy, check;\r\n        while (a_l) {\r\n            part.unshift(a[--a_l]);\r\n            trim(part);\r\n            if (compareAbs(part, b) < 0) {\r\n                result.push(0);\r\n                continue;\r\n            }\r\n            xlen = part.length;\r\n            highx = part[xlen - 1] * base + part[xlen - 2];\r\n            highy = b[b_l - 1] * base + b[b_l - 2];\r\n            if (xlen > b_l) {\r\n                highx = (highx + 1) * base;\r\n            }\r\n            guess = Math.ceil(highx / highy);\r\n            do {\r\n                check = multiplySmall(b, guess);\r\n                if (compareAbs(check, part) <= 0) break;\r\n                guess--;\r\n            } while (guess);\r\n            result.push(guess);\r\n            part = subtract(part, check);\r\n        }\r\n        result.reverse();\r\n        return [arrayToSmall(result), arrayToSmall(part)];\r\n    }\r\n\r\n    function divModSmall(value, lambda) {\r\n        var length = value.length,\r\n            quotient = createArray(length),\r\n            base = BASE,\r\n            i, q, remainder, divisor;\r\n        remainder = 0;\r\n        for (i = length - 1; i >= 0; --i) {\r\n            divisor = remainder * base + value[i];\r\n            q = truncate(divisor / lambda);\r\n            remainder = divisor - q * lambda;\r\n            quotient[i] = q | 0;\r\n        }\r\n        return [quotient, remainder | 0];\r\n    }\r\n\r\n    function divModAny(self, v) {\r\n        var value, n = parseValue(v);\r\n        var a = self.value, b = n.value;\r\n        var quotient;\r\n        if (b === 0) throw new Error(\"Cannot divide by zero\");\r\n        if (self.isSmall) {\r\n            if (n.isSmall) {\r\n                return [new SmallInteger(truncate(a / b)), new SmallInteger(a % b)];\r\n            }\r\n            return [Integer[0], self];\r\n        }\r\n        if (n.isSmall) {\r\n            if (b === 1) return [self, Integer[0]];\r\n            if (b == -1) return [self.negate(), Integer[0]];\r\n            var abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                value = divModSmall(a, abs);\r\n                quotient = arrayToSmall(value[0]);\r\n                var remainder = value[1];\r\n                if (self.sign) remainder = -remainder;\r\n                if (typeof quotient === \"number\") {\r\n                    if (self.sign !== n.sign) quotient = -quotient;\r\n                    return [new SmallInteger(quotient), new SmallInteger(remainder)];\r\n                }\r\n                return [new BigInteger(quotient, self.sign !== n.sign), new SmallInteger(remainder)];\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        var comparison = compareAbs(a, b);\r\n        if (comparison === -1) return [Integer[0], self];\r\n        if (comparison === 0) return [Integer[self.sign === n.sign ? 1 : -1], Integer[0]];\r\n\r\n        // divMod1 is faster on smaller input sizes\r\n        if (a.length + b.length <= 200)\r\n            value = divMod1(a, b);\r\n        else value = divMod2(a, b);\r\n\r\n        quotient = value[0];\r\n        var qSign = self.sign !== n.sign,\r\n            mod = value[1],\r\n            mSign = self.sign;\r\n        if (typeof quotient === \"number\") {\r\n            if (qSign) quotient = -quotient;\r\n            quotient = new SmallInteger(quotient);\r\n        } else quotient = new BigInteger(quotient, qSign);\r\n        if (typeof mod === \"number\") {\r\n            if (mSign) mod = -mod;\r\n            mod = new SmallInteger(mod);\r\n        } else mod = new BigInteger(mod, mSign);\r\n        return [quotient, mod];\r\n    }\r\n\r\n    BigInteger.prototype.divmod = function (v) {\r\n        var result = divModAny(this, v);\r\n        return {\r\n            quotient: result[0],\r\n            remainder: result[1]\r\n        };\r\n    };\r\n    SmallInteger.prototype.divmod = BigInteger.prototype.divmod;\r\n\r\n    BigInteger.prototype.divide = function (v) {\r\n        return divModAny(this, v)[0];\r\n    };\r\n    SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger.prototype.over = BigInteger.prototype.divide;\r\n\r\n    BigInteger.prototype.mod = function (v) {\r\n        return divModAny(this, v)[1];\r\n    };\r\n    SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger.prototype.remainder = BigInteger.prototype.mod;\r\n\r\n    BigInteger.prototype.pow = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value,\r\n            value, x, y;\r\n        if (b === 0) return Integer[1];\r\n        if (a === 0) return Integer[0];\r\n        if (a === 1) return Integer[1];\r\n        if (a === -1) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.sign) {\r\n            return Integer[0];\r\n        }\r\n        if (!n.isSmall) throw new Error(\"The exponent \" + n.toString() + \" is too large.\");\r\n        if (this.isSmall) {\r\n            if (isPrecise(value = Math.pow(a, b)))\r\n                return new SmallInteger(truncate(value));\r\n        }\r\n        x = this;\r\n        y = Integer[1];\r\n        while (true) {\r\n            if (b & 1 === 1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === 0) break;\r\n            b /= 2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    };\r\n    SmallInteger.prototype.pow = BigInteger.prototype.pow;\r\n\r\n    BigInteger.prototype.modPow = function (exp, mod) {\r\n        exp = parseValue(exp);\r\n        mod = parseValue(mod);\r\n        if (mod.isZero()) throw new Error(\"Cannot take modPow with modulus 0\");\r\n        var r = Integer[1],\r\n            base = this.mod(mod);\r\n        while (exp.isPositive()) {\r\n            if (base.isZero()) return Integer[0];\r\n            if (exp.isOdd()) r = r.multiply(base).mod(mod);\r\n            exp = exp.divide(2);\r\n            base = base.square().mod(mod);\r\n        }\r\n        return r;\r\n    };\r\n    SmallInteger.prototype.modPow = BigInteger.prototype.modPow;\r\n\r\n    function compareAbs(a, b) {\r\n        if (a.length !== b.length) {\r\n            return a.length > b.length ? 1 : -1;\r\n        }\r\n        for (var i = a.length - 1; i >= 0; i--) {\r\n            if (a[i] !== b[i]) return a[i] > b[i] ? 1 : -1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    BigInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) return 1;\r\n        return compareAbs(a, b);\r\n    };\r\n    SmallInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = Math.abs(this.value),\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            b = Math.abs(b);\r\n            return a === b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        return -1;\r\n    };\r\n\r\n    BigInteger.prototype.compare = function (v) {\r\n        // See discussion about comparison with Infinity:\r\n        // https://github.com/peterolson/BigInteger.js/issues/61\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (this.sign !== n.sign) {\r\n            return n.sign ? 1 : -1;\r\n        }\r\n        if (n.isSmall) {\r\n            return this.sign ? -1 : 1;\r\n        }\r\n        return compareAbs(a, b) * (this.sign ? -1 : 1);\r\n    };\r\n    BigInteger.prototype.compareTo = BigInteger.prototype.compare;\r\n\r\n    SmallInteger.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            return a == b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        if (a < 0 !== n.sign) {\r\n            return a < 0 ? -1 : 1;\r\n        }\r\n        return a < 0 ? 1 : -1;\r\n    };\r\n    SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;\r\n\r\n    BigInteger.prototype.equals = function (v) {\r\n        return this.compare(v) === 0;\r\n    };\r\n    SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger.prototype.eq = BigInteger.prototype.equals;\r\n\r\n    BigInteger.prototype.notEquals = function (v) {\r\n        return this.compare(v) !== 0;\r\n    };\r\n    SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger.prototype.neq = BigInteger.prototype.notEquals;\r\n\r\n    BigInteger.prototype.greater = function (v) {\r\n        return this.compare(v) > 0;\r\n    };\r\n    SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger.prototype.gt = BigInteger.prototype.greater;\r\n\r\n    BigInteger.prototype.lesser = function (v) {\r\n        return this.compare(v) < 0;\r\n    };\r\n    SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger.prototype.lt = BigInteger.prototype.lesser;\r\n\r\n    BigInteger.prototype.greaterOrEquals = function (v) {\r\n        return this.compare(v) >= 0;\r\n    };\r\n    SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;\r\n\r\n    BigInteger.prototype.lesserOrEquals = function (v) {\r\n        return this.compare(v) <= 0;\r\n    };\r\n    SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;\r\n\r\n    BigInteger.prototype.isEven = function () {\r\n        return (this.value[0] & 1) === 0;\r\n    };\r\n    SmallInteger.prototype.isEven = function () {\r\n        return (this.value & 1) === 0;\r\n    };\r\n\r\n    BigInteger.prototype.isOdd = function () {\r\n        return (this.value[0] & 1) === 1;\r\n    };\r\n    SmallInteger.prototype.isOdd = function () {\r\n        return (this.value & 1) === 1;\r\n    };\r\n\r\n    BigInteger.prototype.isPositive = function () {\r\n        return !this.sign;\r\n    };\r\n    SmallInteger.prototype.isPositive = function () {\r\n        return this.value > 0;\r\n    };\r\n\r\n    BigInteger.prototype.isNegative = function () {\r\n        return this.sign;\r\n    };\r\n    SmallInteger.prototype.isNegative = function () {\r\n        return this.value < 0;\r\n    };\r\n\r\n    BigInteger.prototype.isUnit = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isUnit = function () {\r\n        return Math.abs(this.value) === 1;\r\n    };\r\n\r\n    BigInteger.prototype.isZero = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isZero = function () {\r\n        return this.value === 0;\r\n    };\r\n    BigInteger.prototype.isDivisibleBy = function (v) {\r\n        var n = parseValue(v);\r\n        var value = n.value;\r\n        if (value === 0) return false;\r\n        if (value === 1) return true;\r\n        if (value === 2) return this.isEven();\r\n        return this.mod(n).equals(Integer[0]);\r\n    };\r\n    SmallInteger.prototype.isDivisibleBy = BigInteger.prototype.isDivisibleBy;\r\n\r\n    function isBasicPrime(v) {\r\n        var n = v.abs();\r\n        if (n.isUnit()) return false;\r\n        if (n.equals(2) || n.equals(3) || n.equals(5)) return true;\r\n        if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5)) return false;\r\n        if (n.lesser(49)) return true;\r\n        // we don't know if it's prime: let the other functions figure it out\r\n    }\r\n    \r\n    function millerRabinTest(n, a) {\r\n        var nPrev = n.prev(),\r\n            b = nPrev,\r\n            r = 0,\r\n            d, t, i, x;\r\n        while (b.isEven()) b = b.divide(2), r++;\r\n        next : for (i = 0; i < a.length; i++) {\r\n            if (n.lesser(a[i])) continue;\r\n            x = bigInt(a[i]).modPow(b, n);\r\n            if (x.equals(Integer[1]) || x.equals(nPrev)) continue;\r\n            for (d = r - 1; d != 0; d--) {\r\n                x = x.square().mod(n);\r\n                if (x.isUnit()) return false;    \r\n                if (x.equals(nPrev)) continue next;\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    \r\n// Set \"strict\" to true to force GRH-supported lower bound of 2*log(N)^2\r\n    BigInteger.prototype.isPrime = function (strict) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var bits = n.bitLength();\r\n        if(bits <= 64)\r\n            return millerRabinTest(n, [2, 325, 9375, 28178, 450775, 9780504, 1795265022]);\r\n        var logN = Math.log(2) * bits;\r\n        var t = Math.ceil((strict === true) ? (2 * Math.pow(logN, 2)) : logN);\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt(i + 2));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    SmallInteger.prototype.isPrime = BigInteger.prototype.isPrime;\r\n\r\n    BigInteger.prototype.isProbablePrime = function (iterations) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var t = iterations === undefined ? 5 : iterations;\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt.randBetween(2, n.minus(2)));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    SmallInteger.prototype.isProbablePrime = BigInteger.prototype.isProbablePrime;\r\n\r\n    BigInteger.prototype.modInv = function (n) {\r\n        var t = bigInt.zero, newT = bigInt.one, r = parseValue(n), newR = this.abs(), q, lastT, lastR;\r\n        while (!newR.equals(bigInt.zero)) {\r\n            q = r.divide(newR);\r\n            lastT = t;\r\n            lastR = r;\r\n            t = newT;\r\n            r = newR;\r\n            newT = lastT.subtract(q.multiply(newT));\r\n            newR = lastR.subtract(q.multiply(newR));\r\n        }\r\n        if (!r.equals(1)) throw new Error(this.toString() + \" and \" + n.toString() + \" are not co-prime\");\r\n        if (t.compare(0) === -1) {\r\n            t = t.add(n);\r\n        }\r\n        if (this.isNegative()) {\r\n            return t.negate();\r\n        }\r\n        return t;\r\n    };\r\n\r\n    SmallInteger.prototype.modInv = BigInteger.prototype.modInv;\r\n\r\n    BigInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return subtractSmall(value, 1, this.sign);\r\n        }\r\n        return new BigInteger(addSmall(value, 1), this.sign);\r\n    };\r\n    SmallInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (value + 1 < MAX_INT) return new SmallInteger(value + 1);\r\n        return new BigInteger(MAX_INT_ARR, false);\r\n    };\r\n\r\n    BigInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return new BigInteger(addSmall(value, 1), true);\r\n        }\r\n        return subtractSmall(value, 1, this.sign);\r\n    };\r\n    SmallInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (value - 1 > -MAX_INT) return new SmallInteger(value - 1);\r\n        return new BigInteger(MAX_INT_ARR, true);\r\n    };\r\n\r\n    var powersOfTwo = [1];\r\n    while (2 * powersOfTwo[powersOfTwo.length - 1] <= BASE) powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);\r\n    var powers2Length = powersOfTwo.length, highestPower2 = powersOfTwo[powers2Length - 1];\r\n\r\n    function shift_isSmall(n) {\r\n        return ((typeof n === \"number\" || typeof n === \"string\") && +Math.abs(n) <= BASE) ||\r\n            (n instanceof BigInteger && n.value.length <= 1);\r\n    }\r\n\r\n    BigInteger.prototype.shiftLeft = function (n) {\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        n = +n;\r\n        if (n < 0) return this.shiftRight(-n);\r\n        var result = this;\r\n        if (result.isZero()) return result;\r\n        while (n >= powers2Length) {\r\n            result = result.multiply(highestPower2);\r\n            n -= powers2Length - 1;\r\n        }\r\n        return result.multiply(powersOfTwo[n]);\r\n    };\r\n    SmallInteger.prototype.shiftLeft = BigInteger.prototype.shiftLeft;\r\n\r\n    BigInteger.prototype.shiftRight = function (n) {\r\n        var remQuo;\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        n = +n;\r\n        if (n < 0) return this.shiftLeft(-n);\r\n        var result = this;\r\n        while (n >= powers2Length) {\r\n            if (result.isZero() || (result.isNegative() && result.isUnit())) return result;\r\n            remQuo = divModAny(result, highestPower2);\r\n            result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n            n -= powers2Length - 1;\r\n        }\r\n        remQuo = divModAny(result, powersOfTwo[n]);\r\n        return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n    };\r\n    SmallInteger.prototype.shiftRight = BigInteger.prototype.shiftRight;\r\n\r\n    function bitwise(x, y, fn) {\r\n        y = parseValue(y);\r\n        var xSign = x.isNegative(), ySign = y.isNegative();\r\n        var xRem = xSign ? x.not() : x,\r\n            yRem = ySign ? y.not() : y;\r\n        var xDigit = 0, yDigit = 0;\r\n        var xDivMod = null, yDivMod = null;\r\n        var result = [];\r\n        while (!xRem.isZero() || !yRem.isZero()) {\r\n            xDivMod = divModAny(xRem, highestPower2);\r\n            xDigit = xDivMod[1].toJSNumber();\r\n            if (xSign) {\r\n                xDigit = highestPower2 - 1 - xDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            yDivMod = divModAny(yRem, highestPower2);\r\n            yDigit = yDivMod[1].toJSNumber();\r\n            if (ySign) {\r\n                yDigit = highestPower2 - 1 - yDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            xRem = xDivMod[0];\r\n            yRem = yDivMod[0];\r\n            result.push(fn(xDigit, yDigit));\r\n        }\r\n        var sum = fn(xSign ? 1 : 0, ySign ? 1 : 0) !== 0 ? bigInt(-1) : bigInt(0);\r\n        for (var i = result.length - 1; i >= 0; i -= 1) {\r\n            sum = sum.multiply(highestPower2).add(bigInt(result[i]));\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    BigInteger.prototype.not = function () {\r\n        return this.negate().prev();\r\n    };\r\n    SmallInteger.prototype.not = BigInteger.prototype.not;\r\n\r\n    BigInteger.prototype.and = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a & b; });\r\n    };\r\n    SmallInteger.prototype.and = BigInteger.prototype.and;\r\n\r\n    BigInteger.prototype.or = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a | b; });\r\n    };\r\n    SmallInteger.prototype.or = BigInteger.prototype.or;\r\n\r\n    BigInteger.prototype.xor = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a ^ b; });\r\n    };\r\n    SmallInteger.prototype.xor = BigInteger.prototype.xor;\r\n\r\n    var LOBMASK_I = 1 << 30, LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;\r\n    function roughLOB(n) { // get lowestOneBit (rough)\r\n        // SmallInteger: return Min(lowestOneBit(n), 1 << 30)\r\n        // BigInteger: return Min(lowestOneBit(n), 1 << 14) [BASE=1e7]\r\n        var v = n.value, x = typeof v === \"number\" ? v | LOBMASK_I : v[0] + v[1] * BASE | LOBMASK_BI;\r\n        return x & -x;\r\n    }\r\n\r\n    function integerLogarithm(value, base) {\r\n        if (base.compareTo(value) <= 0) {\r\n            var tmp = integerLogarithm(value, base.square(base));\r\n            var p = tmp.p;\r\n            var e = tmp.e;\r\n            var t = p.multiply(base);\r\n            return t.compareTo(value) <= 0 ? { p: t, e: e * 2 + 1 } : { p: p, e: e * 2 };\r\n        }\r\n        return { p: bigInt(1), e: 0 };\r\n    }\r\n\r\n    BigInteger.prototype.bitLength = function () {\r\n        var n = this;\r\n        if (n.compareTo(bigInt(0)) < 0) {\r\n            n = n.negate().subtract(bigInt(1));\r\n        }\r\n        if (n.compareTo(bigInt(0)) === 0) {\r\n            return bigInt(0);\r\n        }\r\n        return bigInt(integerLogarithm(n, bigInt(2)).e).add(bigInt(1));\r\n    }\r\n    SmallInteger.prototype.bitLength = BigInteger.prototype.bitLength;\r\n\r\n    function max(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.greater(b) ? a : b;\r\n    }\r\n    function min(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.lesser(b) ? a : b;\r\n    }\r\n    function gcd(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        if (a.equals(b)) return a;\r\n        if (a.isZero()) return b;\r\n        if (b.isZero()) return a;\r\n        var c = Integer[1], d, t;\r\n        while (a.isEven() && b.isEven()) {\r\n            d = Math.min(roughLOB(a), roughLOB(b));\r\n            a = a.divide(d);\r\n            b = b.divide(d);\r\n            c = c.multiply(d);\r\n        }\r\n        while (a.isEven()) {\r\n            a = a.divide(roughLOB(a));\r\n        }\r\n        do {\r\n            while (b.isEven()) {\r\n                b = b.divide(roughLOB(b));\r\n            }\r\n            if (a.greater(b)) {\r\n                t = b; b = a; a = t;\r\n            }\r\n            b = b.subtract(a);\r\n        } while (!b.isZero());\r\n        return c.isUnit() ? a : a.multiply(c);\r\n    }\r\n    function lcm(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        return a.divide(gcd(a, b)).multiply(b);\r\n    }\r\n    function randBetween(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        var low = min(a, b), high = max(a, b);\r\n        var range = high.subtract(low).add(1);\r\n        if (range.isSmall) return low.add(Math.floor(Math.random() * range));\r\n        var length = range.value.length - 1;\r\n        var result = [], restricted = true;\r\n        for (var i = length; i >= 0; i--) {\r\n            var top = restricted ? range.value[i] : BASE;\r\n            var digit = truncate(Math.random() * top);\r\n            result.unshift(digit);\r\n            if (digit < top) restricted = false;\r\n        }\r\n        result = arrayToSmall(result);\r\n        return low.add(typeof result === \"number\" ? new SmallInteger(result) : new BigInteger(result, false));\r\n    }\r\n    var parseBase = function (text, base) {\r\n        var length = text.length;\r\n        var i;\r\n        var absBase = Math.abs(base);\r\n        for (var i = 0; i < length; i++) {\r\n            var c = text[i].toLowerCase();\r\n            if (c === \"-\") continue;\r\n            if (/[a-z0-9]/.test(c)) {\r\n                if (/[0-9]/.test(c) && +c >= absBase) {\r\n                    if (c === \"1\" && absBase === 1) continue;\r\n                    throw new Error(c + \" is not a valid digit in base \" + base + \".\");\r\n                } else if (c.charCodeAt(0) - 87 >= absBase) {\r\n                    throw new Error(c + \" is not a valid digit in base \" + base + \".\");\r\n                }\r\n            }\r\n        }\r\n        if (2 <= base && base <= 36) {\r\n            if (length <= LOG_MAX_INT / Math.log(base)) {\r\n                var result = parseInt(text, base);\r\n                if (isNaN(result)) {\r\n                    throw new Error(c + \" is not a valid digit in base \" + base + \".\");\r\n                }\r\n                return new SmallInteger(parseInt(text, base));\r\n            }\r\n        }\r\n        base = parseValue(base);\r\n        var digits = [];\r\n        var isNegative = text[0] === \"-\";\r\n        for (i = isNegative ? 1 : 0; i < text.length; i++) {\r\n            var c = text[i].toLowerCase(),\r\n                charCode = c.charCodeAt(0);\r\n            if (48 <= charCode && charCode <= 57) digits.push(parseValue(c));\r\n            else if (97 <= charCode && charCode <= 122) digits.push(parseValue(c.charCodeAt(0) - 87));\r\n            else if (c === \"<\") {\r\n                var start = i;\r\n                do { i++; } while (text[i] !== \">\");\r\n                digits.push(parseValue(text.slice(start + 1, i)));\r\n            }\r\n            else throw new Error(c + \" is not a valid character\");\r\n        }\r\n        return parseBaseFromArray(digits, base, isNegative);\r\n    };\r\n\r\n    function parseBaseFromArray(digits, base, isNegative) {\r\n        var val = Integer[0], pow = Integer[1], i;\r\n        for (i = digits.length - 1; i >= 0; i--) {\r\n            val = val.add(digits[i].times(pow));\r\n            pow = pow.times(base);\r\n        }\r\n        return isNegative ? val.negate() : val;\r\n    }\r\n\r\n    function stringify(digit) {\r\n        if (digit <= 35) {\r\n            return \"0123456789abcdefghijklmnopqrstuvwxyz\".charAt(digit);\r\n        }\r\n        return \"<\" + digit + \">\";\r\n    }\r\n\r\n    function toBase(n, base) {\r\n        base = bigInt(base);\r\n        if (base.isZero()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            throw new Error(\"Cannot convert nonzero numbers to base 0.\");\r\n        }\r\n        if (base.equals(-1)) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            if (n.isNegative())\r\n                return {\r\n                    value: [].concat.apply([], Array.apply(null, Array(-n))\r\n                        .map(Array.prototype.valueOf, [1, 0])\r\n                    ),\r\n                    isNegative: false\r\n                };\r\n\r\n            var arr = Array.apply(null, Array(+n - 1))\r\n                .map(Array.prototype.valueOf, [0, 1]);\r\n            arr.unshift([1]);\r\n            return {\r\n                value: [].concat.apply([], arr),\r\n                isNegative: false\r\n            };\r\n        }\r\n\r\n        var neg = false;\r\n        if (n.isNegative() && base.isPositive()) {\r\n            neg = true;\r\n            n = n.abs();\r\n        }\r\n        if (base.equals(1)) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n\r\n            return {\r\n                value: Array.apply(null, Array(+n))\r\n                    .map(Number.prototype.valueOf, 1),\r\n                isNegative: neg\r\n            };\r\n        }\r\n        var out = [];\r\n        var left = n, divmod;\r\n        while (left.isNegative() || left.compareAbs(base) >= 0) {\r\n            divmod = left.divmod(base);\r\n            left = divmod.quotient;\r\n            var digit = divmod.remainder;\r\n            if (digit.isNegative()) {\r\n                digit = base.minus(digit).abs();\r\n                left = left.next();\r\n            }\r\n            out.push(digit.toJSNumber());\r\n        }\r\n        out.push(left.toJSNumber());\r\n        return { value: out.reverse(), isNegative: neg };\r\n    }\r\n\r\n    function toBaseString(n, base) {\r\n        var arr = toBase(n, base);\r\n        return (arr.isNegative ? \"-\" : \"\") + arr.value.map(stringify).join('');\r\n    }\r\n\r\n    BigInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    SmallInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    BigInteger.prototype.toString = function (radix) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix !== 10) return toBaseString(this, radix);\r\n        var v = this.value, l = v.length, str = String(v[--l]), zeros = \"0000000\", digit;\r\n        while (--l >= 0) {\r\n            digit = String(v[l]);\r\n            str += zeros.slice(digit.length) + digit;\r\n        }\r\n        var sign = this.sign ? \"-\" : \"\";\r\n        return sign + str;\r\n    };\r\n\r\n    SmallInteger.prototype.toString = function (radix) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix != 10) return toBaseString(this, radix);\r\n        return String(this.value);\r\n    };\r\n    BigInteger.prototype.toJSON = SmallInteger.prototype.toJSON = function () { return this.toString(); }\r\n\r\n    BigInteger.prototype.valueOf = function () {\r\n        return parseInt(this.toString(), 10);\r\n    };\r\n    BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;\r\n\r\n    SmallInteger.prototype.valueOf = function () {\r\n        return this.value;\r\n    };\r\n    SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;\r\n\r\n    function parseStringValue(v) {\r\n        if (isPrecise(+v)) {\r\n            var x = +v;\r\n            if (x === truncate(x))\r\n                return new SmallInteger(x);\r\n            throw new Error(\"Invalid integer: \" + v);\r\n        }\r\n        var sign = v[0] === \"-\";\r\n        if (sign) v = v.slice(1);\r\n        var split = v.split(/e/i);\r\n        if (split.length > 2) throw new Error(\"Invalid integer: \" + split.join(\"e\"));\r\n        if (split.length === 2) {\r\n            var exp = split[1];\r\n            if (exp[0] === \"+\") exp = exp.slice(1);\r\n            exp = +exp;\r\n            if (exp !== truncate(exp) || !isPrecise(exp)) throw new Error(\"Invalid integer: \" + exp + \" is not a valid exponent.\");\r\n            var text = split[0];\r\n            var decimalPlace = text.indexOf(\".\");\r\n            if (decimalPlace >= 0) {\r\n                exp -= text.length - decimalPlace - 1;\r\n                text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);\r\n            }\r\n            if (exp < 0) throw new Error(\"Cannot include negative exponent part for integers\");\r\n            text += (new Array(exp + 1)).join(\"0\");\r\n            v = text;\r\n        }\r\n        var isValid = /^([0-9][0-9]*)$/.test(v);\r\n        if (!isValid) throw new Error(\"Invalid integer: \" + v);\r\n        var r = [], max = v.length, l = LOG_BASE, min = max - l;\r\n        while (max > 0) {\r\n            r.push(+v.slice(min, max));\r\n            min -= l;\r\n            if (min < 0) min = 0;\r\n            max -= l;\r\n        }\r\n        trim(r);\r\n        return new BigInteger(r, sign);\r\n    }\r\n\r\n    function parseNumberValue(v) {\r\n        if (isPrecise(v)) {\r\n            if (v !== truncate(v)) throw new Error(v + \" is not an integer.\");\r\n            return new SmallInteger(v);\r\n        }\r\n        return parseStringValue(v.toString());\r\n    }\r\n\r\n    function parseValue(v) {\r\n        if (typeof v === \"number\") {\r\n            return parseNumberValue(v);\r\n        }\r\n        if (typeof v === \"string\") {\r\n            return parseStringValue(v);\r\n        }\r\n        return v;\r\n    }\r\n    // Pre-define numbers in range [-999,999]\r\n    for (var i = 0; i < 1000; i++) {\r\n        Integer[i] = new SmallInteger(i);\r\n        if (i > 0) Integer[-i] = new SmallInteger(-i);\r\n    }\r\n    // Backwards compatibility\r\n    Integer.one = Integer[1];\r\n    Integer.zero = Integer[0];\r\n    Integer.minusOne = Integer[-1];\r\n    Integer.max = max;\r\n    Integer.min = min;\r\n    Integer.gcd = gcd;\r\n    Integer.lcm = lcm;\r\n    Integer.isInstance = function (x) { return x instanceof BigInteger || x instanceof SmallInteger; };\r\n    Integer.randBetween = randBetween;\r\n\r\n    Integer.fromArray = function (digits, base, isNegative) {\r\n        return parseBaseFromArray(digits.map(parseValue), parseValue(base || 10), isNegative);\r\n    };\r\n\r\n    return Integer;\r\n})();\r\n\r\n// Node.js check\r\nif (typeof module !== \"undefined\" && module.hasOwnProperty(\"exports\")) {\r\n    module.exports = bigInt;\r\n}\r\n\r\n//amd check\r\nif (typeof define === \"function\" && define.amd) {\r\n    define(\"big-integer\", [], function () {\r\n        return bigInt;\r\n    });\r\n}\r\n","// https://gitlab.com/mjbecze/leb128 was ported so that we can reuse older version of bn.js (4.0.0) instead of the one leb128 uses (5.1)\n\n// Could not make import work for bn.js as @types/bn.js wasn't working\n/* tslint:disable:no-var-requires */\nconst Bn = require('bn.js')\n// https://gitlab.com/mjbecze/leb128/-/blob/master/stream.js\nclass Stream{\n  public buffer:Buffer\n  private bytesRead:number\n\n  constructor (buf:Buffer = Buffer.from([])) {\n    this.buffer = buf\n    this.bytesRead = 0\n  }\n\n  public read (size:number) {\n    const data = this.buffer.slice(0, size)\n    this.buffer = this.buffer.slice(size)\n    this.bytesRead += size\n    return data\n  }\n\n  public write (buf:[any]) {\n    this.buffer = Buffer.concat([this.buffer, Buffer.from(buf)])\n  }\n}\n\n// https://gitlab.com/mjbecze/leb128/-/blob/master/unsigned.js\nfunction read (stream: Stream) {\n  return readBn(stream).toString()\n}\n\nfunction readBn (stream: Stream) {\n  const num = new Bn(0)\n  let shift = 0\n  let byt\n  while (true) {\n    byt = stream.read(1)[0]\n    /* tslint:disable:no-bitwise */\n    num.ior(new Bn(byt & 0x7f).shln(shift))\n    if (byt >> 7 === 0) {\n      break\n    } else {\n      shift += 7\n    }\n  }\n  return num\n}\n\nfunction write (num:string | number, stream: Stream) {\n  const bigNum = new Bn(num)\n  while (true) {\n    const i = bigNum.maskn(7).toNumber()\n    bigNum.ishrn(7)\n    if (bigNum.isZero()) {\n      stream.write([i])\n      break\n    } else {\n      stream.write([i | 0x80])\n    }\n  }\n}\n\n/**\n * LEB128 encodeds an interger\n * @param {String|Number} num\n * @return {Buffer}\n */\nexport function encode (num: string | number ) {\n  const stream = new Stream()\n  write(num, stream)\n  return stream.buffer\n}\n\n/**\n * decodes a LEB128 encoded interger\n * @param {Buffer} buffer\n * @return {String}\n */\nexport function decode (buffer:Buffer) {\n  const stream = new Stream(buffer)\n  return read(stream)\n}\n","export class Address {\n  public str: Buffer;\n  constructor(str: Buffer) {\n    if (!str || str.length < 1) { throw new Error('Missing str in address') }\n    this.str = str\n  }\n\n  // https://beta.spec.filecoin.io/#appendix__address__protocol-indicator\n  public protocol(): number {\n    if (this.str.length < 1) {\n      throw Error('No address found.')\n    }\n\n    return this.str[0]\n  }\n\n  public payload(): Buffer {\n    if (this.str.length < 1) {\n      throw Error('No address found.')\n    }\n    return this.str.slice(1, this.str.length)\n  }\n}\n","// Ported from https://www.npmjs.com/package/@glif/filecoin-address to reduce file size\n\nimport { blake2b } from 'blakejs'\nimport { b32decode, b32encode, hex2a} from 'crypto-addr-codec';\nimport { decode as lebDecode, encode as lebEncode } from '../leb128/unsigned';\nimport { Address } from './address';\n\nfunction validateChecksum (ingest:Buffer, expect:Buffer){\n    const digest = getChecksum(ingest)\n    return Buffer.compare(Buffer.from(digest), expect)\n}\n\nfunction getChecksum (ingest:Buffer):Buffer {\n    return blake2b(ingest, null, 4)\n}\n\nfunction checkAddressString (address:string){\n    if (!address){throw Error('No bytes to validate.')}\n    if (address.length < 3){throw Error('Address is too short to validate.')}\n    if (address[0] !== 'f' && address[0] !== 't') {\n        throw Error('Unknown address network.')\n    }\n\n    switch (address[1]) {\n        case '0': {\n        if (address.length > 22){throw Error('Invalid ID address length.')}\n        break\n        }\n        case '1': {\n        if (address.length !== 41){throw Error('Invalid secp256k1 address length.')}\n        break\n        }\n        case '2': {\n        if (address.length !== 41){throw Error('Invalid Actor address length.')}\n        break\n        }\n        case '3': {\n        if (address.length !== 86){throw Error('Invalid BLS address length.')}\n        break\n        }\n        default: {\n            throw new Error('Invalid address protocol.')\n        }\n    }\n}\n\nfunction filDecode (address: string) {\n    checkAddressString(address)\n    const network = address[0]\n    const protocol = parseInt(address[1], 10)\n    const protocolByte = Buffer.from([protocol])\n    const raw = address.slice(2)\n\n    if (protocol === 0) {\n      return filNewAddress(protocol, Buffer.from(lebEncode(raw)))\n    }\n\n    const payloadChecksum = Buffer.from(b32decode(raw.toUpperCase()))\n    const { length } = payloadChecksum\n    const payload = payloadChecksum.slice(0, length - 4)\n    const checksum = payloadChecksum.slice(length - 4, length)\n    if (validateChecksum(Buffer.concat([protocolByte, payload]), checksum)) {\n        throw Error(\"Checksums don't match\")\n    }\n\n    const addressObj = filNewAddress(protocol, payload)\n    if (filEncode(network, addressObj) !== address){\n        throw Error(`Did not encode this address properly: ${address}`)\n    }\n    return addressObj\n}\n\n\nfunction filEncode (network:string, address:Address) {\n    if (!address || !address.str){throw Error('Invalid address')}\n    let addressString = ''\n    const payload = address.payload()\n    const protocol = address.protocol()\n\n    switch (protocol) {\n        case 0: {\n            const decoded = lebDecode(payload)\n            addressString = network + String(protocol) + decoded\n            break\n        }\n        default: {\n            const protocolByte = Buffer.from([protocol])\n            const toChecksum = Buffer.concat([protocolByte, payload])\n            const checksum = getChecksum(toChecksum)\n            const bytes = Buffer.concat([payload, Buffer.from(checksum)])\n            const bytes2a = hex2a(bytes.toString('hex'));\n            const bytes32encoded = b32encode(bytes2a).replace(/=/g, '').toLowerCase();\n            addressString = String(network) + String(protocol) + bytes32encoded\n            break\n        }\n    }\n    return addressString\n}\n\nfunction filNewAddress (protocol:number, payload:Buffer): Address {\n    const protocolByte = Buffer.from([protocol])\n    const input = Buffer.concat([protocolByte, payload])\n    return new Address(input)\n}\n  \nexport function filAddrEncoder(data: Buffer): string {\n    const address = filNewAddress(data[0], data.slice(1))\n    return filEncode('f', address).toString()\n}\n    \nexport function filAddrDecoder(data: string): Buffer {\n    return filDecode(data).str\n}    \n","// REF: https://github.com/ensdomains/address-encoder/pull/130#issuecomment-735935450\n\ntype Address = BigInt\n\n// [n,k,d]-Linear code parameters\n// The linear code used in the account addressing is a [64,45,7]\n// It generates a [64,45]-code, which is the space of Flow account addresses.\n//\n// n is the size of the code words in bits,\n// which is also the size of the account addresses in bits.\nconst linearCodeN = 64\n\n// Columns of the parity-check matrix H of the [64,45]-code used for Flow addresses.\n// H is a (n x p) matrix with coefficients in GF(2), each column is converted into\n// a big endian integer representation of the GF(2) column vector.\n// H is used to verify a code word is a valid account address.\nconst parityCheckMatrixColumns: BigInt[] = [\n  BigInt(0x00001),\n  BigInt(0x00002),\n  BigInt(0x00004),\n  BigInt(0x00008),\n  BigInt(0x00010),\n  BigInt(0x00020),\n  BigInt(0x00040),\n  BigInt(0x00080),\n  BigInt(0x00100),\n  BigInt(0x00200),\n  BigInt(0x00400),\n  BigInt(0x00800),\n  BigInt(0x01000),\n  BigInt(0x02000),\n  BigInt(0x04000),\n  BigInt(0x08000),\n  BigInt(0x10000),\n  BigInt(0x20000),\n  BigInt(0x40000),\n  BigInt(0x7328d),\n  BigInt(0x6689a),\n  BigInt(0x6112f),\n  BigInt(0x6084b),\n  BigInt(0x433fd),\n  BigInt(0x42aab),\n  BigInt(0x41951),\n  BigInt(0x233ce),\n  BigInt(0x22a81),\n  BigInt(0x21948),\n  BigInt(0x1ef60),\n  BigInt(0x1deca),\n  BigInt(0x1c639),\n  BigInt(0x1bdd8),\n  BigInt(0x1a535),\n  BigInt(0x194ac),\n  BigInt(0x18c46),\n  BigInt(0x1632b),\n  BigInt(0x1529b),\n  BigInt(0x14a43),\n  BigInt(0x13184),\n  BigInt(0x12942),\n  BigInt(0x118c1),\n  BigInt(0x0f812),\n  BigInt(0x0e027),\n  BigInt(0x0d00e),\n  BigInt(0x0c83c),\n  BigInt(0x0b01d),\n  BigInt(0x0a831),\n  BigInt(0x0982b),\n  BigInt(0x07034),\n  BigInt(0x0682a),\n  BigInt(0x05819),\n  BigInt(0x03807),\n  BigInt(0x007d2),\n  BigInt(0x00727),\n  BigInt(0x0068e),\n  BigInt(0x0067c),\n  BigInt(0x0059d),\n  BigInt(0x004eb),\n  BigInt(0x003b4),\n  BigInt(0x0036a),\n  BigInt(0x002d9),\n  BigInt(0x001c7),\n  BigInt(0x0003f),\n];\n\n/* tslint:disable:no-bitwise */\n\nexport function isValidAddress(address: Address, chain: ChainID): boolean {\n  let codeWord: BigInt = address;\n  codeWord = BigInt(codeWord) ^ BigInt(chain.codeword);\n\n  if (codeWord === BigInt(0)) {\n    return false;\n  }\n\n  // Multiply the code word GF(2)-vector by the parity-check matrix\n  let parity = BigInt(0);\n  for (let i = 0; i < linearCodeN; i++) {\n    if ((BigInt(codeWord) & BigInt(1)) === BigInt(1)) {\n      parity = BigInt(parity) ^ BigInt(parityCheckMatrixColumns[i]);\n    }\n    codeWord = BigInt(codeWord) >> BigInt(1);\n  }\n  return parity === BigInt(0) && codeWord === BigInt(0);\n}\n\nexport class ChainID {\n  public static mainnet = new ChainID(BigInt(0));\n  public static testnet = new ChainID(BigInt(0x6834ba37b3980209));\n  public static emulator = new ChainID(BigInt(0x1cb159857af02018));\n\n  constructor(readonly codeword: BigInt) {}\n}\n","'use strict';\n// the right shift is important, it has to do with 32 bit operations in javascript, it will make things faster\nexport function u64(h, l) {\n  /* tslint:disable:no-bitwise */\n  this.hi = h >>> 0;\n  this.lo = l >>> 0;\n  /* tslint:enable:no-bitwise */\n}\n\nu64.prototype.set = function(oWord) {\n  this.lo = oWord.lo;\n  this.hi = oWord.hi;\n};\n\nu64.prototype.add = function(oWord) {\n  let lowest;\n  let lowMid;\n  let highMid;\n  let highest; // four parts of the whole 64 bit number..\n\n  // need to add the respective parts from each number and the carry if on is present..\n  /* tslint:disable:no-bitwise */\n  lowest = (this.lo & 0XFFFF) + (oWord.lo & 0XFFFF);\n  lowMid = (this.lo >>> 16) + (oWord.lo >>> 16) + (lowest >>> 16);\n  highMid = (this.hi & 0XFFFF) + (oWord.hi & 0XFFFF) + (lowMid >>> 16);\n  highest = (this.hi >>> 16) + (oWord.hi >>> 16) + (highMid >>> 16);\n\n  // now set the hgih and the low accordingly..\n  this.lo = (lowMid << 16) | (lowest & 0XFFFF);\n  this.hi = (highest << 16) | (highMid & 0XFFFF);\n  /* tslint:enable:no-bitwise */\n\n  return this; // for chaining..\n};\n\nu64.prototype.addOne = function() {\n  if (this.lo === -1 || this.lo === 0xFFFFFFFF) {\n    this.lo = 0;\n    this.hi++;\n  }\n  else {\n    this.lo++;\n  }\n};\n\nu64.prototype.plus = function(oWord) {\n  let c = new u64(0, 0);\n  let lowest;\n  let lowMid;\n  let highMid;\n  let highest; // four parts of the whole 64 bit number..\n\n  // need to add the respective parts from each number and the carry if on is present..\n  /* tslint:disable:no-bitwise */\n  lowest = (this.lo & 0XFFFF) + (oWord.lo & 0XFFFF);\n  lowMid = (this.lo >>> 16) + (oWord.lo >>> 16) + (lowest >>> 16);\n  highMid = (this.hi & 0XFFFF) + (oWord.hi & 0XFFFF) + (lowMid >>> 16);\n  highest = (this.hi >>> 16) + (oWord.hi >>> 16) + (highMid >>> 16);\n\n  // now set the hgih and the low accordingly..\n  c.lo = (lowMid << 16) | (lowest & 0XFFFF);\n  c.hi = (highest << 16) | (highMid & 0XFFFF);\n  /* tslint:enable:no-bitwise */\n\n  return c; //for chaining..\n};\n\nu64.prototype.not = function() {\n  /* tslint:disable:no-bitwise */\n  return new u64(~this.hi, ~this.lo);\n  /* tslint:enable:no-bitwise */\n};\n\nu64.prototype.one = function() {\n  return new u64(0x0, 0x1);\n};\n\nu64.prototype.zero = function() {\n  return new u64(0x0, 0x0);\n};\n\nu64.prototype.neg = function() {\n  return this.not().plus(this.one());\n};\n\nu64.prototype.minus = function(oWord) {\n  return this.plus(oWord.neg());\n};\n\nu64.prototype.isZero = function() {\n  return (this.lo === 0) && (this.hi === 0);\n};\n\nfunction isLong(obj) {\n  // @ts-nocheck\n  return (obj && obj.__isLong__) === true;\n}\n\nfunction fromNumber(value) {\n  if (isNaN(value) || !isFinite(value)) {\n    return this.zero();}\n  /* tslint:disable:no-bitwise */\n  let pow32 = (1 << 32);\n  \n  return new u64((value % pow32) | 0, (value / pow32) | 0);\n  /* tslint:enable:no-bitwise */\n}\n\nu64.prototype.multiply = function(multiplier) {\n  if (this.isZero()) {\n    return this.zero();}\n  if (!isLong(multiplier)) {\n    multiplier = fromNumber(multiplier); }\n  if (multiplier.isZero()) {\n    return this.zero();}\n\n  // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n  // We can skip products that would overflow.\n\n  /* tslint:disable:no-bitwise */\n  let a48 = this.hi >>> 16;\n  let a32 = this.hi & 0xFFFF;\n  let a16 = this.lo >>> 16;\n  let a00 = this.lo & 0xFFFF;\n\n  let b48 = multiplier.hi >>> 16;\n  let b32 = multiplier.hi & 0xFFFF;\n  let b16 = multiplier.lo >>> 16;\n  let b00 = multiplier.lo & 0xFFFF;\n\n  let c48 = 0;\n  let c32 = 0;\n  let c16 = 0;\n  let c00 = 0;\n  c00 += a00 * b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 * b00;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c16 += a00 * b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 * b00;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a16 * b16;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a00 * b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n  c48 &= 0xFFFF;\n  return new u64((c48 << 16) | c32, (c16 << 16) | c00);\n  /* tslint:enable:no-bitwise */\n};\n\nu64.prototype.shiftLeft = function(bits) {\n  bits = bits % 64;\n  let c = new u64(0, 0);\n  /* tslint:disable:no-bitwise */\n  if (bits === 0) {\n    return this.clone();\n  }\n  else if (bits > 31) {\n    c.lo = 0;\n    c.hi = this.lo << (bits - 32);\n  }\n  else {\n    let toMoveUp = this.lo >>> 32 - bits;\n    c.lo = this.lo << bits;\n    c.hi = (this.hi << bits) | toMoveUp;\n  }\n  /* tslint:enable:no-bitwise */\n  return c; //for chaining..\n};\n\nu64.prototype.setShiftLeft = function(bits) {\n  if (bits === 0) {\n    return this;\n  }\n  if (bits > 63) {\n    bits = bits % 64;\n  }\n  /* tslint:disable:no-bitwise */\n  if (bits > 31) {\n    this.hi = this.lo << (bits - 32);\n    this.lo = 0;\n  }\n  else {\n    let toMoveUp = this.lo >>> 32 - bits;\n    this.lo <<= bits;\n    this.hi = (this.hi << bits) | toMoveUp;\n  }\n  /* tslint:enable:no-bitwise */\n  return this; // for chaining..\n};\n// Shifts this word by the given number of bits to the right (max 32)..\nu64.prototype.shiftRight = function(bits) {\n  bits = bits % 64;\n  let c = new u64(0, 0);\n  /* tslint:disable:no-bitwise */\n  if (bits === 0) {\n    return this.clone();\n  }\n  else if (bits >= 32) {\n    c.hi = 0;\n    c.lo = this.hi >>> (bits - 32);\n  }\n  else {\n    let bitsOff32 = 32 - bits;\n    let toMoveDown = this.hi << bitsOff32 >>> bitsOff32;\n    c.hi = this.hi >>> bits;\n    c.lo = this.lo >>> bits | (toMoveDown << bitsOff32);\n  }\n  /* tslint:enable:no-bitwise */\n  return c; // for chaining..\n};\n// Rotates the bits of this word round to the left (max 32)..\nu64.prototype.rotateLeft = function(bits) {\n  if (bits > 32) {\n    return this.rotateRight(64 - bits);\n  }\n  /* tslint:disable:no-bitwise */\n  let c = new u64(0, 0);\n  if (bits === 0) {\n    c.lo = this.lo >>> 0;\n    c.hi = this.hi >>> 0;\n  }\n  else if (bits === 32) { //just switch high and low over in this case..\n    c.lo = this.hi;\n    c.hi = this.lo;\n  }\n  else {\n    c.lo = (this.lo << bits) | (this.hi >>> (32 - bits));\n    c.hi = (this.hi << bits) | (this.lo >>> (32 - bits));\n  }\n  /* tslint:enable:no-bitwise */\n  return c; // for chaining..\n};\n\nu64.prototype.setRotateLeft = function(bits) {\n  if (bits > 32) {\n    return this.setRotateRight(64 - bits);\n  }\n  /* tslint:disable:no-bitwise */\n  let newHigh;\n  if (bits === 0) {\n    return this;\n  }\n  else if (bits === 32) { //just switch high and low over in this case..\n    newHigh = this.lo;\n    this.lo = this.hi;\n    this.hi = newHigh;\n  }\n  else {\n    newHigh = (this.hi << bits) | (this.lo >>> (32 - bits));\n    this.lo = (this.lo << bits) | (this.hi >>> (32 - bits));\n    this.hi = newHigh;\n  }\n  /* tslint:enable:no-bitwise */\n  return this; // for chaining..\n};\n// Rotates the bits of this word round to the right (max 32)..\nu64.prototype.rotateRight = function(bits) {\n  if (bits > 32) {\n    return this.rotateLeft(64 - bits);\n  }\n  /* tslint:disable:no-bitwise */\n  let c = new u64(0, 0);\n  if (bits === 0) {\n    c.lo = this.lo >>> 0;\n    c.hi = this.hi >>> 0;\n  }\n  else if (bits === 32) { // just switch high and low over in this case..\n    c.lo = this.hi;\n    c.hi = this.lo;\n  }\n  else {\n    c.lo = (this.hi << (32 - bits)) | (this.lo >>> bits);\n    c.hi = (this.lo << (32 - bits)) | (this.hi >>> bits);\n  }\n  /* tslint:enable:no-bitwise */\n  return c; // for chaining..\n};\nu64.prototype.setFlip = function() {\n  let newHigh;\n  newHigh = this.lo;\n  this.lo = this.hi;\n  this.hi = newHigh;\n  return this;\n};\n// Rotates the bits of this word round to the right (max 32)..\nu64.prototype.setRotateRight = function(bits) {\n  if (bits > 32) {\n    return this.setRotateLeft(64 - bits);\n  }\n\n  if (bits === 0) {\n    return this;\n  }\n  else if (bits === 32) { //just switch high and low over in this case..\n    let newHigh;\n    newHigh = this.lo;\n    this.lo = this.hi;\n    this.hi = newHigh;\n  }\n  else {\n    /* tslint:disable:no-bitwise */\n    newHigh = (this.lo << (32 - bits)) | (this.hi >>> bits);\n    this.lo = (this.hi << (32 - bits)) | (this.lo >>> bits);\n    /* tslint:enable:no-bitwise */\n    this.hi = newHigh;\n  }\n  return this; // for chaining..\n};\n// Xors this word with the given other..\nu64.prototype.xor = function(oWord) {\n  let c = new u64(0, 0);\n  /* tslint:disable:no-bitwise */\n  c.hi = this.hi ^ oWord.hi;\n  c.lo = this.lo ^ oWord.lo;\n  /* tslint:enable:no-bitwise */\n  return c; // for chaining..\n};\n// Xors this word with the given other..\nu64.prototype.setxorOne = function(oWord) {\n  /* tslint:disable:no-bitwise */\n  this.hi ^= oWord.hi;\n  this.lo ^= oWord.lo;\n  /* tslint:enable:no-bitwise */\n  return this; // for chaining..\n};\n// Ands this word with the given other..\nu64.prototype.and = function(oWord) {\n  let c = new u64(0, 0);\n  /* tslint:disable:no-bitwise */\n  c.hi = this.hi & oWord.hi;\n  c.lo = this.lo & oWord.lo;\n  /* tslint:enable:no-bitwise */\n  return c; //for chaining..\n};\n\n// Creates a deep copy of this Word..\nu64.prototype.clone = function() {\n  return new u64(this.hi, this.lo);\n};\n\nu64.prototype.setxor64 = function() {\n  let a = arguments;\n  let i = a.length;\n  /* tslint:disable:no-bitwise */\n  while (i--) {\n    this.hi ^= a[i].hi;\n    this.lo ^= a[i].lo;\n  }\n  /* tslint:enable:no-bitwise */\n  return this;\n}\n\nexport function u(h, l) {      \n  return new u64(h, l);\n}\n\nexport function xor64() {\n  let a = arguments;\n  let h = a[0].hi;\n  let l = a[0].lo;\n  let i = a.length-1;\n  /* tslint:disable:no-bitwise */\n  do {\n    h ^= a[i].hi;\n    l ^= a[i].lo;\n    i--;\n  } while (i>0);\n  /* tslint:enable:no-bitwise */\n  return new this.u64(h, l);\n}\n\nexport function clone64Array(array) {\n  let i = 0;\n  let len = array.length;\n  let a = new Array(len);\n  while(i<len) {\n    a[i] = array[i];\n    i++;\n  }\n  return a;\n}\n\n// this shouldn't be a problem, but who knows in the future javascript might support 64bits\nexport function t32(x) {\n  /* tslint:disable:no-bitwise */\n  return (x & 0xFFFFFFFF);\n  /* tslint:enable:no-bitwise */\n}\n\nexport  function rotl32(x, c) {\n  /* tslint:disable:no-bitwise */\n  return (((x) << (c)) | ((x) >>> (32 - (c)))) & (0xFFFFFFFF);\n  /* tslint:enable:no-bitwise */\n}\n\nexport  function rotr32(x, c) {\n  return this.rotl32(x, (32 - (c)));\n}\n\nexport  function swap32(val) {\n  /* tslint:disable:no-bitwise */\n  return ((val & 0xFF) << 24) |\n    ((val & 0xFF00) << 8) |\n    ((val >>> 8) & 0xFF00) |\n    ((val >>> 24) & 0xFF);\n  /* tslint:enable:no-bitwise */\n}\n\nexport function swap32Array(a) {\n  // can't do this with map because of support for IE8 (Don't hate me plz).\n  let i = 0;\n  let len = a.length;\n  let r = new Array(i);\n  while (i<len) {\n    r[i] = (this.swap32(a[i]));\n    i++;\n  }\n  return r;\n}\n\nexport function xnd64(x, y, z) {\n  /* tslint:disable:no-bitwise */\n  return new this.u64(x.hi ^ ((~y.hi) & z.hi), x.lo ^ ((~y.lo) & z.lo));\n  /* tslint:enable:no-bitwise */\n}\n\nexport function bufferInsert(buffer, bufferOffset, data, len, dataOffset) {\n  /* tslint:disable:no-bitwise */\n  dataOffset = dataOffset | 0;\n  /* tslint:enable:no-bitwise */\n  let i = 0;\n  while (i < len) {\n    buffer[i + bufferOffset] = data[i + dataOffset];\n    i++;\n  }\n}\n\nexport function bufferInsert64(buffer, bufferOffset, data, len) {\n  let i = 0;\n  while (i < len) {\n    buffer[i + bufferOffset] = data[i].clone();\n    i++;\n  }\n}\n\nexport function bufferInsertBackwards(buffer, bufferOffset, data, len) {\n  let i = 0;\n  while (i < len) {\n    buffer[i + bufferOffset] = data[len - 1 - i];\n    i++;\n  }\n}\n\nexport function bufferSet(buffer, bufferOffset, value, len) {\n  let i = 0;\n  while (i < len) {\n    buffer[i + bufferOffset] = value;\n    i++;\n  }\n}\n\nexport function bufferXORInsert(buffer, bufferOffset, data, dataOffset, len) {\n  let i = 0;\n  while (i < len) {\n    /* tslint:disable:no-bitwise */\n    buffer[i + bufferOffset] ^= data[i + dataOffset];\n    /* tslint:enable:no-bitwise */\n    i++;\n  }\n}\n\nexport function xORTable(d, s1, s2, len) {\n  let i = 0;\n  while (i < len) {\n    /* tslint:disable:no-bitwise */\n    d[i] = s1[i] ^ s2[i];\n    /* tslint:enable:no-bitwise */\n    i++\n  }\n}\n","'use strict';\n// String functions\n\nimport { u64 } from './op.js';\n\nexport function int8ArrayToHexString(array) {\n\tlet str = '';\n\n\tfor (let i = 0; i < array.length; i++) {\n\t\tif (array[i] < 16) {\n\t\t\tstr += '0' + array[i].toString(16);\n\t\t}\n\t\telse {\n\t\t\tstr += array[i].toString(16);\n\t\t}\n\t}\n\treturn str;\n}\n\nexport function int32ArrayToHexString(array) {\n\tlet str = '';\n\tlet len = array.length;\n\tfor (let i = 0; i < len; i++) {\n\t\tlet s = array[i];\n\t\tif (s < 0) {\n\t\t\ts = 0xFFFFFFFF + array[i] + 1;\n\t\t}\n\t\tlet l = s.toString(16);\n\t\tlet padding = 8;\n\t\twhile (l.length < padding) {\n\t\t\tl = \"0\" + l;\n\t\t}\n\t\tstr += l;\n\t}\n\treturn str;\n}\n\nexport function hex2string(s) {\n\tfor (let c = [], len = s.length, i = 0; i < len; i += 2) {\n\t\tc.push(String.fromCharCode(parseInt(s.substring(i, i + 2), 16))); }\n\treturn c.join('');\n}\n\nexport function hex2bytes(s) {\n\tfor (let c = [], len = s.length, i = 0; i < len; i += 2) {\n\t\tc.push(parseInt(s.substring(i, i + 2), 16)); }\n\treturn c;\n}\n\nexport function string2bytes(s) {\n\tlet len = s.length;\n\tlet b = new Array(len);\n\tlet i = 0;\n\twhile (i < len) {\n\t\tb[i] = s.charCodeAt(i);\n\t\ti++;\n\t}\n\treturn b;\n}\n\nexport  function bytes2Int32Buffer(b) {\n\tif (!b) { return []; }\n\t/* tslint:disable:no-bitwise */\n\tlet len = b.length ? (((b.length - 1) >>> 2) + 1) : 0;\n\tlet buffer = new Array(len);\n\tlet j = 0;\n\twhile (j < len) {\n\t\tbuffer[j] = (b[j * 4] << 24) | (b[j * 4 + 1] << 16) | (b[j * 4 + 2] << 8) | b[j * 4 + 3];\n\t\tj++;\n\t}\n    /* tslint:enable:no-bitwise */\n\treturn buffer;\n}\n\nexport function bytes2Int64Buffer(b) {\n\tif (!b) { return []; }\n\t/* tslint:disable:no-bitwise */\n\tlet len = b.length ? (((b.length - 1) >>> 3) + 1) : 0;\n\tlet buffer = new Array(len);\n\tlet j = 0;\n\twhile (j < len) {\n\t\tbuffer[j] = new u64((b[j * 8] << 24) | (b[j * 8 + 1] << 16) | (b[j * 8 + 2] << 8) | b[j * 8 + 3], (b[j * 8 + 4] << 24) | (b[j * 8 + 5] << 16) | (b[j * 8 + 6] << 8) | b[j * 8 + 7]);\n\t\tj++;\n\t}\n\t/* tslint:enable:no-bitwise */\n\treturn buffer;\n}\n\nexport function bytes2Int64BufferLeAligned(b) {\n\tif (!b) { return []; }\n\t/* tslint:disable:no-bitwise */\n\tlet len =  b.length ? ((( b.length - 1) >>> 3) + 1) : 0;\n\tlet buffer = new Array(len);\n\tlet j = 0;\n\twhile (j < len) {\n\t\tbuffer[j] = new u64((b[j * 8 + 7] << 24) | (b[j * 8 + 6] << 16) | (b[j * 8 + 5] << 8) | b[j * 8 + 4], (b[j * 8 + 3] << 24) | (b[j * 8 + 2] << 16) | (b[j * 8 + 1] << 8) | b[j * 8]);\n\t\tj++;\n\t}\n\t/* tslint:enable:no-bitwise */\n\treturn buffer;\n}\n\nexport function bufferEncode64leAligned(buffer, offset, uint64) {\n\t/* tslint:disable:no-bitwise */\n\tbuffer[offset + 7] = uint64.hi >>> 24;\n\tbuffer[offset + 6] = uint64.hi >>> 16 & 0xFF;\n\tbuffer[offset + 5] = uint64.hi >>> 8 & 0xFF;\n\tbuffer[offset + 4] = uint64.hi & 0xFF;\n\tbuffer[offset + 3] = uint64.lo >>> 24;\n\tbuffer[offset + 2] = uint64.lo >>> 16 & 0xFF;\n\tbuffer[offset + 1] = uint64.lo >>> 8 & 0xFF;\n\tbuffer[offset + 0] = uint64.lo & 0xFF;\n\t/* tslint:enable:no-bitwise */\n}\n\nexport  function bufferEncode64(buffer, offset, uint64) {\n\t/* tslint:disable:no-bitwise */\n\tbuffer[offset] = uint64.hi >>> 24;\n\tbuffer[offset + 1] = uint64.hi >>> 16 & 0xFF;\n\tbuffer[offset + 2] = uint64.hi >>> 8 & 0xFF;\n\tbuffer[offset + 3] = uint64.hi & 0xFF;\n\tbuffer[offset + 4] = uint64.lo >>> 24;\n\tbuffer[offset + 5] = uint64.lo >>> 16 & 0xFF;\n\tbuffer[offset + 6] = uint64.lo >>> 8 & 0xFF;\n\tbuffer[offset + 7] = uint64.lo & 0xFF;\n\t/* tslint:enable:no-bitwise */\n}\n\nexport function int32Buffer2Bytes(b) {\n\tlet buffer = new Array(b.length);\n\tlet len = b.length;\n\tlet i = 0;\n\t/* tslint:disable:no-bitwise */\n\twhile (i < len) {\n\t\tbuffer[i * 4] = (b[i] & 0xFF000000) >>> 24;\n\t\tbuffer[i * 4 + 1] = (b[i] & 0x00FF0000) >>> 16;\n\t\tbuffer[i * 4 + 2] = (b[i] & 0x0000FF00) >>> 8;\n\t\tbuffer[i * 4 + 3] = (b[i] & 0x000000FF);\n\t\ti++;\n\t}\n\t/* tslint:enable:no-bitwise */\n\treturn buffer;\n}\n\nexport function string2Int32Buffer(s) {\n\treturn bytes2Int32Buffer(string2bytes(s));\n}\n\nlet keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\nexport  function b64Encode(input) {\n\tlet output = \"\";\n\tlet chr1;\n\tlet chr2;\n\tlet chr3;\n\tlet enc1;\n\tlet enc2;\n\tlet enc3\n\tlet enc4;\n\tlet i = 0;\n\n\twhile (i < input.length) {\n\n\t\tchr1 = input[i++];\n\t\tchr2 = input[i++];\n\t\tchr3 = input[i++];\n        /* tslint:disable:no-bitwise */\n\t\tenc1 = chr1 >> 2;\n\t\tenc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n\t\tenc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n\t\tenc4 = chr3 & 63;\n        /* tslint:enable:no-bitwise */\n\t\tif (isNaN(chr2)) {\n\t\t\tenc3 = enc4 = 64;\n\t\t}\n\t\telse if (isNaN(chr3)) {\n\t\t\tenc4 = 64;\n\t\t}\n\n\t\toutput +=\n\t\t\tkeyStr.charAt(enc1) + keyStr.charAt(enc2) +\n\t\t\tkeyStr.charAt(enc3) + keyStr.charAt(enc4);\n\t}\n\n\treturn output;\n}\n\nexport function b64Decode(input) {\n\tlet output = [];\n\t// @ts-ignore\n\tlet chr1;\n\tlet  chr2;\n\tlet chr3;\n\tlet enc1;\n\tlet enc2;\n\tlet enc3\n\tlet enc4;\n\tlet i = 0;\n\n\tinput = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n\twhile (i < input.length) {\n\n\t\tenc1 = keyStr.indexOf(input.charAt(i++));\n\t\tenc2 = keyStr.indexOf(input.charAt(i++));\n\t\tenc3 = keyStr.indexOf(input.charAt(i++));\n\t\tenc4 = keyStr.indexOf(input.charAt(i++));\n\n\t\t/* tslint:disable:no-bitwise */\n\t\tchr1 = (enc1 << 2) | (enc2 >> 4);\n\t\tchr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n\t\tchr3 = ((enc3 & 3) << 6) | enc4;\n\t\t/* tslint:enable:no-bitwise */\n\n\t\toutput.push(chr1);\n\n\t\tif (enc3 !== 64) {\n\t\t\toutput.push(chr2);\n\t\t}\n\t\tif (enc4 !== 64) {\n\t\t\toutput.push(chr3);\n\t\t}\n\t}\n\treturn output;\n}","/////////////////////////////////////\n////////////  groestl ///////////////\n\n//// Written by Quantum Explorer ////\n////////// Dash Foundation //////////\n/// Released under the MIT License //\n/////////////////////////////////////\n\nimport { u, u64, bufferInsert, bufferSet, bufferInsert64, xor64 }  from './op';\nimport { bytes2Int64Buffer, b64Decode, int32Buffer2Bytes, int32ArrayToHexString, string2bytes, bufferEncode64 } from './helper';\n\nvar T0 = bytes2Int64Buffer(b64Decode(\"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\"));\nvar T1 = bytes2Int64Buffer(b64Decode(\"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\"));\nvar T2 = bytes2Int64Buffer(b64Decode(\"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\"));\nvar T3 = bytes2Int64Buffer(b64Decode(\"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\"));\nvar T4 = bytes2Int64Buffer(b64Decode(\"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\"));\nvar T5 = bytes2Int64Buffer(b64Decode(\"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\"));\nvar T6 = bytes2Int64Buffer(b64Decode(\"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\"));\nvar T7 = bytes2Int64Buffer(b64Decode(\"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\"));\n\n\n\nvar B64 = function(n, x) {\n  if (n === 7) {\n    /* tslint:disable:no-bitwise */\n    return x.lo & 0xFF;\n    /* tslint:enable:no-bitwise */\n  }\n  var bits = (7 - n) * 8;\n  if (bits >= 32) { // faster than >= 32\n    /* tslint:disable:no-bitwise */\n    return (x.hi >>> (bits - 32)) & 0xFF;\n    /* tslint:enable:no-bitwise */\n  }\n  else {\n    var bitsOff32 = 32 - bits;\n    /* tslint:disable:no-bitwise */\n    let toMoveDown = x.hi << bitsOff32 >>> bitsOff32;\n    return (x.lo >>> bits | (toMoveDown << bitsOff32)) & 0xFF;\n    /* tslint:enable:no-bitwise */\n  }\n};\n\nvar j64 = [u(0, 0), u(0, 0x10), u(0, 0x20), u(0, 0x30), u(0, 0x40), u(0, 0x50), u(0, 0x60),\n  u(0, 0x70), u(0, 0x80), u(0, 0x90), u(0, 0xA0), u(0, 0xB0), u(0, 0xC0),\n  u(0, 0xD0), u(0, 0xE0), u(0, 0xF0)\n];\n\nvar nj64 = [u(0xFFFFFFFF, 0xFFFFFFFF), u(0xFFFFFFFF, 0xFFFFFFEF), u(0xFFFFFFFF, 0xFFFFFFDF), u(0xFFFFFFFF, 0xFFFFFFCF), u(0xFFFFFFFF, 0xFFFFFFBF), u(0xFFFFFFFF, 0xFFFFFFAF), u(0xFFFFFFFF, 0xFFFFFF9F),\n  u(0xFFFFFFFF, 0xFFFFFF8F), u(0xFFFFFFFF, 0xFFFFFF7F), u(0xFFFFFFFF, 0xFFFFFF6F), u(0xFFFFFFFF, 0xFFFFFF5F), u(0xFFFFFFFF, 0xFFFFFF4F), u(0xFFFFFFFF, 0xFFFFFF3F),\n  u(0xFFFFFFFF, 0xFFFFFF2F), u(0xFFFFFFFF, 0xFFFFFF1F), u(0xFFFFFFFF, 0xFFFFFF0F)\n];\n\nvar r64 = [u(0, 0), u(0, 1), u(0, 2), u(0, 3), u(0, 4), u(0, 5), u(0, 6), u(0, 7),\n  u(0, 8), u(0, 9), u(0, 10), u(0, 11), u(0, 12), u(0, 13)\n];\n\nvar compress = function(int64buf, state) {\n  var g = new Array(16);\n  var m = new Array(16);\n  for (let uu = 0; uu < 16; uu++) {\n    m[uu] = int64buf[uu];\n    g[uu] = m[uu].xor(state[uu]);\n  }\n  var t = new Array(16);\n  for (let r = 0; r < 14; r++) {\n    for (var i = 0; i < 16; i++) {\n      g[i].setxor64(j64[i].plus(r64[r]).setShiftLeft(56));\n    }\n\n    for (let uu = 0; uu < 16; uu++) {\n      /* tslint:disable:no-bitwise */\n      t[uu] = xor64(T0[B64(0, g[uu])], T1[B64(1, g[(uu + 1) & 0xF])], T2[B64(2, g[(uu + 2) & 0xF])], T3[B64(3, g[(uu + 3) & 0xF])], T4[B64(4, g[(uu + 4) & 0xF])], T5[B64(5, g[(uu + 5) & 0xF])], T6[B64(6, g[(uu + 6) & 0xF])], T7[B64(7, g[(uu + 11) & 0xF])]);\n    }\n    let temp = g;\n    g = t;\n    t = temp;\n  }\n  for (let r = 0; r < 14; r++) {\n    for (let ii = 0; ii < 16; ii++) {\n      m[ii].setxor64(r64[r], nj64[ii]);\n    }\n    for (let uu = 0; uu < 16; uu++) {\n      t[uu] = xor64(T0[B64(0, m[(uu + 1) & 0xF])], T1[B64(1, m[(uu + 3) & 0xF])], T2[B64(2, m[(uu + 5) & 0xF])], T3[B64(3, m[(uu + 11) & 0xF])], T4[B64(4, m[(uu + 0) & 0xF])], T5[B64(5, m[(uu + 2) & 0xF])], T6[B64(6, m[(uu + 4) & 0xF])], T7[B64(7, m[(uu + 6) & 0xF])]);\n    }\n    /* tslint:enable:no-bitwise */\n    temp = m;\n    m = t;\n    t = temp;\n  }\n  for (let uu = 0; uu < 16; uu++) {\n    state[uu].setxor64(g[uu], m[uu]);\n  }\n}\n\nvar final = function(state) {\n  var g = new Array(16);\n  bufferInsert64(g, 0, state, 16);\n  var t = new Array(16);\n  for (let r = 0; r < 14; r++) {\n    \n    for (let i = 0; i < 16; i++) {\n      g[i].setxor64(j64[i].plus(r64[r]).setShiftLeft(56));\n    }\n    /* tslint:disable:no-bitwise */\n    for (let uu = 0; uu < 16; uu++) {\n      t[uu] = xor64(T0[B64(0, g[uu])], T1[B64(1, g[(uu + 1) & 0xF])], T2[B64(2, g[(uu + 2) & 0xF])], T3[B64(3, g[(uu + 3) & 0xF])], T4[B64(4, g[(uu + 4) & 0xF])], T5[B64(5, g[(uu + 5) & 0xF])], T6[B64(6, g[(uu + 6) & 0xF])], T7[B64(7, g[(uu + 11) & 0xF])]);\n    }\n    /* tslint:enable:no-bitwise */\n    var temp = g;\n    g = t;\n    t = temp;\n  }\n  for (let uu = 0; uu < 16; uu++) {\n    state[uu].setxor64(g[uu]);}\n}\n\nvar groestl = function(ctx, data, len) {\n  let buf;\n  let ptr;\n  //create a local copy of states\n  var V = new Array(16);\n  buf = ctx.buffer;\n  ptr = ctx.ptr;\n  if (len < ctx.buffer.length - ptr) {\n    bufferInsert(buf, ptr, data, data.length);\n    ptr += data.length;\n    ctx.ptr = ptr;\n    return;\n  }\n  //perform a deep copy of current state\n  bufferInsert(V, 0, ctx.state, 16);\n  while (len > 0) {\n    var clen = ctx.buffer.length - ptr;\n    if (clen > len) { clen = len; }\n    bufferInsert(buf, ptr, data, clen);\n    ptr += clen;\n    data = data.slice(clen);\n    len -= clen;\n    if (ptr === ctx.buffer.length) {\n      var int64Buf = bytes2Int64Buffer(buf);\n      compress(int64Buf, V);\n      ctx.count.addOne();\n      ptr = 0;\n    }\n  }\n  ctx.state = V;\n  ctx.ptr = ptr;\n};\n\nvar groestlClose = function(ctx) {\n  var buf = ctx.buffer;\n  var ptr = ctx.ptr;\n  var pad = new Array(136);\n  var len = buf.length;\n  var padLen;\n  var count;\n  pad[0] = 0x80;\n  if (ptr < 120) {\n    padLen = 128 - ptr;\n    count = ctx.count.plus(u(0, 1));\n  }\n  else {\n    padLen = 256 - ptr;\n    count = ctx.count.plus(u(0, 2));\n  }\n  bufferSet(pad, 1, 0, padLen - 9);\n  bufferEncode64(pad, padLen - 8, count);\n  groestl(ctx, pad, padLen);\n  final(ctx.state);\n  var out = new Array(16);\n  for (let uu = 0, v = 8; uu < 8; uu++, v++) {\n    out[2 * uu] = ctx.state[v].hi;\n    out[2 * uu + 1] = ctx.state[v].lo;\n  }\n  return out;\n}\n\nexport function groestll(input, format, output) {\n  var msg;\n  if (format === 1) {\n    msg = input;\n  }\n  else if (format === 2) {\n    msg = int32Buffer2Bytes(input);\n  }\n  else {\n    msg = string2bytes(input);\n  }\n  var ctx = {};\n  ctx.state = new Array(16);\n  for (var i = 0; i < 15; i++) {\n    ctx.state[i] = new u64(0, 0);\n  }\n  ctx.state[15] = new u64(0, 512);\n  ctx.ptr = 0;\n  ctx.count = new u64(0,0);\n  ctx.buffer = new Array(128);\n  groestl(ctx, msg, msg.length);\n  let r = groestlClose(ctx, 0, 0);\n  var out;\n  if (output === 2) {\n    out = r;\n  }\n  else if (output === 1) {\n    out = int32Buffer2Bytes(r)\n  }\n  else {\n    out = int32ArrayToHexString(r)\n  }\n  return out;\n}","// Ported from https://www.npmjs.com/package/@xmr-core/xmr-b58 to reduce file size\n\nimport bigInt from 'big-integer';\n\nconst b58: any = {};\n\nconst alphabetStr = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\nconst alphabet: number[] = [];\nfor (let i = 0; i < alphabetStr.length; i++) {\n  alphabet.push(alphabetStr.charCodeAt(i));\n}\nconst encodedBlockSizes = [0, 2, 3, 5, 6, 7, 9, 10, 11];\n\nconst alphabetSize = alphabet.length;\nconst fullBlockSize = 8;\nconst fullEncodedBlockSize = 11;\n\nfunction hexToBin(hex: string) {\n  if (hex.length % 2 !== 0) {\n    throw Error(\"Hex string has invalid length!\");\n  }\n  const res = new Uint8Array(hex.length / 2);\n  for (let i = 0; i < hex.length / 2; ++i) {\n    res[i] = parseInt(hex.slice(i * 2, i * 2 + 2), 16);\n  }\n  return res;\n}\n\nfunction binToHex(bin: string | any[] | Uint8Array) {\n  const out = [];\n  for(const i of Object.keys(bin)) {\n    out.push((\"0\" + bin[Number(i)].toString(16)).slice(-2));\n  }\n  return out.join(\"\");\n}\n\nfunction strToBin(str: string) {\n  const res = new Uint8Array(str.length);\n  for (let i = 0; i < str.length; i++) {\n    res[i] = str.charCodeAt(i);\n  }\n  return res;\n}\n\nfunction binToStr(bin: string | any[] | Uint8Array) {\n  const out = [];\n  for(const i of Object.keys(bin)) {\n    out.push(String.fromCharCode(bin[Number(i)]));\n  }\n  return out.join(\"\");\n}\n\nfunction uint8BeTo64(data: string | any[]) {\n  if (data.length < 1 || data.length > 8) {\n    throw Error(\"Invalid input length\");\n  }\n  let res = bigInt.zero;\n  const twopow8 = bigInt(2).pow(8);\n  let i = 0;\n  switch (9 - data.length) {\n    case 1:\n      res = res.add(data[i++]);\n    case 2:\n      res = res.multiply(twopow8).add(data[i++]);\n    case 3:\n      res = res.multiply(twopow8).add(data[i++]);\n    case 4:\n      res = res.multiply(twopow8).add(data[i++]);\n    case 5:\n      res = res.multiply(twopow8).add(data[i++]);\n    case 6:\n      res = res.multiply(twopow8).add(data[i++]);\n    case 7:\n      res = res.multiply(twopow8).add(data[i++]);\n    case 8:\n      res = res.multiply(twopow8).add(data[i++]);\n      break;\n    default:\n      throw Error(\"Impossible condition\");\n  }\n  return res;\n}\n\nfunction uint64ToBe8(num: { remainder: (arg0: any) => any; divide: (arg0: any) => any; }, size: number | Iterable<number>) {\n  const res = new Uint8Array(size as number);\n  if (size < 1 || size > 8) {\n    throw Error(\"Invalid input length\");\n  }\n  const twopow8 = bigInt(2).pow(8);\n  for (let i = (size as number) - 1; i >= 0; i--) {\n    res[i] = parseInt(num.remainder(twopow8).toString(), 10);\n    num = num.divide(twopow8);\n  }\n  return res;\n}\n\nb58.encodeBlock = (data: string | any[], buf: { [x: string]: number; }, index: number) => {\n  if (data.length < 1 || data.length > fullEncodedBlockSize) {\n    throw Error(\"Invalid block length: \" + data.length);\n  }\n  let num = uint8BeTo64(data);\n  let i = encodedBlockSizes[data.length] - 1;\n  // while num > 0\n  while (num.compare(0) === 1) {\n    const div = num.divmod(alphabetSize);\n    // remainder = num % alphabetSize\n    const remainder = div.remainder;\n    // num = num / alphabetSize\n    num = div.quotient;\n    buf[index + i] = alphabet[parseInt(remainder.toString(), 10)];\n    i--;\n  }\n  return buf;\n};\n\nb58.decodeBlock = (data: string | any[], buf: { set: (arg0: Uint8Array, arg1: any) => void; }, index: any) => {\n  if (data.length < 1 || data.length > fullEncodedBlockSize) {\n    throw Error(\"Invalid block length: \" + data.length);\n  }\n\n  const resSize = encodedBlockSizes.indexOf(data.length);\n  if (resSize <= 0) {\n    throw Error(\"Invalid block size\");\n  }\n  let resNum = bigInt(0);\n  let order = bigInt(1);\n  for (let i = data.length - 1; i >= 0; i--) {\n    const digit = alphabet.indexOf(data[i]);\n    if (digit < 0) {\n      throw Error(\"Invalid symbol\");\n    }\n    const product = order.multiply(digit).add(resNum);\n    // if product > UINT64MAX(bigInt(2).pow(64))\n    if (product.compare(bigInt(2).pow(64)) === 1) {\n      throw Error(\"Overflow\");\n    }\n    resNum = product;\n    order = order.multiply(alphabetSize);\n  }\n  if (\n    resSize < fullBlockSize &&\n    bigInt(2).pow(8 * resSize).compare(resNum) <= 0\n  ) {\n    throw Error(\"Overflow 2\");\n  }\n  buf.set(uint64ToBe8(resNum, resSize), index);\n  return buf;\n};\n\nexport function xmrAddressEncoder(data: Buffer): string {\n  const bin = hexToBin(data.toString('hex'));\n  if (bin.length === 0) {\n    throw Error('Unrecognised address format');\n  }\n  const fullBlockCount = Math.floor(bin.length / fullBlockSize);\n  const lastBlockSize = bin.length % fullBlockSize;\n  const resSize =\n    fullBlockCount * fullEncodedBlockSize +\n    encodedBlockSizes[lastBlockSize];\n\n  let res = new Uint8Array(resSize);\n  let i;\n  for (i = 0; i < resSize; ++i) {\n    res[i] = alphabet[0];\n  }\n  for (i = 0; i < fullBlockCount; i++) {\n    res = b58.encodeBlock(\n      bin.subarray(\n        i * fullBlockSize,\n        i * fullBlockSize + fullBlockSize,\n      ),\n      res,\n      i * fullEncodedBlockSize,\n    );\n  }\n  if (lastBlockSize > 0) {\n    res = b58.encodeBlock(\n      bin.subarray(\n        fullBlockCount * fullBlockSize,\n        fullBlockCount * fullBlockSize + lastBlockSize,\n      ),\n      res,\n      fullBlockCount * fullEncodedBlockSize,\n    );\n  }\n  return binToStr(res);\n};\n\nexport function xmrAddressDecoder(data: string): Buffer {\n  const bin = strToBin(data);\n  if (bin.length === 0) {\n    throw Error('Unrecognised address format');\n  }\n  const fullBlockCount = Math.floor(bin.length / fullEncodedBlockSize);\n  const lastBlockSize = bin.length % fullEncodedBlockSize;\n  const lastBlockDecodedSize = encodedBlockSizes.indexOf(\n    lastBlockSize,\n  );\n  if (lastBlockDecodedSize < 0) {\n    throw Error(\"Invalid encoded length\");\n  }\n  const dataSize =\n    fullBlockCount * fullBlockSize + lastBlockDecodedSize;\n  let dataU = new Uint8Array(dataSize);\n  for (let i = 0; i < fullBlockCount; i++) {\n    dataU = b58.decodeBlock(\n      bin.subarray(\n        i * fullEncodedBlockSize,\n        i * fullEncodedBlockSize + fullEncodedBlockSize,\n      ),\n      dataU,\n      i * fullBlockSize,\n    );\n  }\n  if (lastBlockSize > 0) {\n    dataU = b58.decodeBlock(\n      bin.subarray(\n        fullBlockCount * fullEncodedBlockSize,\n        fullBlockCount * fullEncodedBlockSize +\n        lastBlockSize,\n      ),\n      dataU,\n      fullBlockCount * fullBlockSize,\n    );\n  }\n  return Buffer.from(binToHex(dataU), 'hex');\n};","// From https://github.com/nimiq/hub/blob/695131352e5ba58032da744c6f3938cea2894c53/src/lib/AddressUtils.ts\n// https://nimiq-network.github.io/developer-reference/chapters/primitives.html#address\n\n/* tslint:disable:no-bitwise */\n\nconst CCODE = 'NQ';\nconst BASE32_ALPHABET_NIMIQ = '0123456789ABCDEFGHJKLMNPQRSTUVXY';\n\nfunction nimqCheck(str: string, ccode: string): string {\n  function _ibanCheck(data: string): number {\n    const num = data\n      .split('')\n      .map(c => {\n        const code = c.toUpperCase().charCodeAt(0);\n        return code >= 48 && code <= 57 ? c : (code - 55).toString();\n      })\n      .join('');\n    let tmp = '';\n\n    for (let i = 0; i < Math.ceil(num.length / 6); i++) {\n      tmp = (parseInt(tmp + num.substr(i * 6, 6), 10) % 97).toString();\n    }\n\n    return parseInt(tmp, 10);\n  }\n\n  return ('00' + (98 - _ibanCheck(str + ccode + '00'))).slice(-2);\n}\n\nfunction toBase32(buf: Buffer, alphabet = BASE32_ALPHABET_NIMIQ): string {\n  let shift = 3;\n  let carry = 0;\n  let byte;\n  let symbol;\n  let i;\n  let res = '';\n\n  for (i = 0; i < buf.length; i++) {\n    byte = buf[i];\n    symbol = carry | (byte >> shift);\n    res += alphabet[symbol & 0x1f];\n\n    if (shift > 5) {\n      shift -= 5;\n      symbol = byte >> shift;\n      res += alphabet[symbol & 0x1f];\n    }\n\n    shift = 5 - shift;\n    carry = byte << shift;\n    shift = 8 - shift;\n  }\n\n  if (shift !== 3) {\n    res += alphabet[carry & 0x1f];\n  }\n\n  while (res.length % 8 !== 0 && alphabet.length === 33) {\n    res += alphabet[32];\n  }\n\n  return res;\n}\n\nfunction fromBase32(base32: string, alphabet = BASE32_ALPHABET_NIMIQ): Buffer {\n  const charmap: { [key: string]: number } = {};\n  alphabet\n    .toUpperCase()\n    .split('')\n    .forEach((c, i) => {\n      if (!(c in charmap)) {\n        charmap[c] = i;\n      }\n    });\n\n  let symbol;\n  let shift = 8;\n  let carry = 0;\n  const buf = [];\n\n  base32\n    .toUpperCase()\n    .split('')\n    .forEach(char => {\n      // ignore padding\n      if (alphabet.length === 33 && char === alphabet[32]) {\n        return;\n      }\n\n      symbol = charmap[char] & 0xff;\n\n      shift -= 5;\n      if (shift > 0) {\n        carry |= symbol << shift;\n      } else if (shift < 0) {\n        buf.push(carry | (symbol >> -shift));\n        shift += 8;\n        carry = (symbol << shift) & 0xff;\n      } else {\n        buf.push(carry | symbol);\n        shift = 8;\n        carry = 0;\n      }\n    });\n\n  if (shift !== 8 && carry !== 0) {\n    buf.push(carry);\n  }\n\n  return Buffer.from(buf);\n}\n\nexport function nimqDecoder(data: string): Buffer {\n  if (!data.startsWith(CCODE)) {\n    throw Error('Unrecognised address format');\n  }\n  const addr = data.replace(/ /g, '');\n  const check = addr.slice(2, 4);\n  const base32Part = addr.slice(4);\n\n  if (check !== nimqCheck(base32Part, CCODE)) {\n    throw Error('Unrecognised address format');\n  }\n\n  return fromBase32(base32Part);\n}\n\nexport function nimqEncoder(data: Buffer): string {\n  const base32Part = toBase32(data);\n  const check = nimqCheck(base32Part, CCODE);\n  return (CCODE + check + base32Part).replace(/.{4}/g, '$& ').trim();\n}\n","import {\n  decode as bech32Decode,\n  encode as bech32Encode,\n  fromWords as bech32FromWords,\n  toWords as bech32ToWords,\n} from 'bech32';\nimport bigInt from 'big-integer';\nimport { blake2b, blake2bHex } from 'blakejs';\nimport { decode as bs58DecodeNoCheck, encode as bs58EncodeNoCheck } from 'bs58';\n// @ts-ignore\nimport {\n  b32decode,\n  b32encode,\n  bs58Decode,\n  bs58Encode,\n  cashaddrDecode,\n  cashaddrEncode,\n  codec as xrpCodec,\n  decodeCheck as decodeEd25519PublicKey,\n  encodeCheck as encodeEd25519PublicKey,\n  eosPublicKey,\n  hex2a,\n  isValid as isValidXemAddress,\n  isValidChecksumAddress as rskIsValidChecksumAddress,\n  ss58Decode,\n  ss58Encode,\n  stripHexPrefix as rskStripHexPrefix,\n  toChecksumAddress as rskToChecksumAddress,\n} from 'crypto-addr-codec';\nimport { sha512_256 } from 'js-sha512';\nimport { decode as nanoBase32Decode, encode as nanoBase32Encode } from 'nano-base32';\nimport { Keccak, SHA3 } from 'sha3';\nimport { filAddrDecoder, filAddrEncoder } from './filecoin/index';\nimport { ChainID, isValidAddress } from './flow/index';\nimport { groestl_2 }  from './groestl-hash-js/index';\nimport { xmrAddressDecoder, xmrAddressEncoder } from './monero/xmr-base58';\nimport { nimqDecoder, nimqEncoder } from './nimq';\n\ntype EnCoder = (data: Buffer) => string;\ntype DeCoder = (data: string) => Buffer;\n\ntype base58CheckVersion = number[]\n\nexport interface IFormat {\n  coinType: number;\n  name: string;\n  encoder: (data: Buffer) => string;\n  decoder: (data: string) => Buffer;\n}\n\n// Support version field of more than one byte (e.g. Zcash)\nfunction makeBitcoinBase58CheckEncoder(p2pkhVersion: base58CheckVersion, p2shVersion: base58CheckVersion): (data: Buffer) => string {\n  return (data: Buffer) => {\n    let addr: Buffer;\n    switch (data.readUInt8(0)) {\n      case 0x76: // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n        if (\n          data.readUInt8(1) !== 0xa9 ||\n          data.readUInt8(data.length - 2) !== 0x88 ||\n          data.readUInt8(data.length - 1) !== 0xac\n        ) {\n          throw Error('Unrecognised address format');\n        }\n        addr = Buffer.concat([Buffer.from(p2pkhVersion), data.slice(3, 3 + data.readUInt8(2))]);\n        // @ts-ignore\n        return bs58Encode(addr);\n      case 0xa9: // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n        if (data.readUInt8(data.length - 1) !== 0x87) {\n          throw Error('Unrecognised address format');\n        }\n        addr = Buffer.concat([Buffer.from(p2shVersion), data.slice(2, 2 + data.readUInt8(1))]);\n        return bs58Encode(addr);\n      default:\n        throw Error('Unrecognised address format');\n    }\n  };\n}\n\n// Supports version field of more than one byte\n// NOTE: Assumes all versions in p2pkhVersions[] or p2shVersions[] will have the same length\nfunction makeBitcoinBase58CheckDecoder(p2pkhVersions: base58CheckVersion[], p2shVersions: base58CheckVersion[]): (data: string) => Buffer {\n  return (data: string) => {\n    const addr = bs58Decode(data);\n\n    // Checks if the first addr bytes are exactly equal to provided version field\n    const checkVersion = (version: base58CheckVersion) => {\n      return version.every((value: number, index: number) => index < addr.length && value === addr.readUInt8(index))\n    }\n    if (p2pkhVersions.some(checkVersion)) {\n      return Buffer.concat([Buffer.from([0x76, 0xa9, 0x14]), addr.slice(p2pkhVersions[0].length), Buffer.from([0x88, 0xac])]);\n    } else if (p2shVersions.some(checkVersion)) {\n      return Buffer.concat([Buffer.from([0xa9, 0x14]), addr.slice(p2shVersions[0].length), Buffer.from([0x87])]);\n    }\n    throw Error('Unrecognised address format');\n  };\n}\n\nconst bitcoinBase58Chain = (name: string, coinType: number, p2pkhVersions: base58CheckVersion[], p2shVersions: base58CheckVersion[]) => ({\n  coinType,\n  decoder: makeBitcoinBase58CheckDecoder(p2pkhVersions, p2shVersions),\n  encoder: makeBitcoinBase58CheckEncoder(p2pkhVersions[0], p2shVersions[0]),\n  name,\n});\n\nfunction makeBech32SegwitEncoder(hrp: string): (data: Buffer) => string {\n  return (data: Buffer) => {\n    let version = data.readUInt8(0);\n    if (version >= 0x51 && version <= 0x60) {\n      version -= 0x50;\n    } else if (version !== 0x00) {\n      throw Error('Unrecognised address format');\n    }\n\n    const words = [version].concat(bech32ToWords(data.slice(2, data.readUInt8(1) + 2)));\n    return bech32Encode(hrp, words);\n  };\n}\n\nfunction makeBech32SegwitDecoder(hrp: string): (data: string) => Buffer {\n  return (data: string) => {\n    const { prefix, words } = bech32Decode(data);\n    if (prefix !== hrp) {\n      throw Error('Unexpected human-readable part in bech32 encoded address');\n    }\n    const script = bech32FromWords(words.slice(1));\n    let version = words[0];\n    if (version > 0) {\n      version += 0x50;\n    }\n    return Buffer.concat([Buffer.from([version, script.length]), Buffer.from(script)]);\n  };\n}\n\nfunction makeBitcoinEncoder(hrp: string, p2pkhVersion: base58CheckVersion, p2shVersion: base58CheckVersion): (data: Buffer) => string {\n  const encodeBech32 = makeBech32SegwitEncoder(hrp);\n  const encodeBase58Check = makeBitcoinBase58CheckEncoder(p2pkhVersion, p2shVersion);\n  return (data: Buffer) => {\n    try {\n      return encodeBase58Check(data);\n    } catch {\n      return encodeBech32(data);\n    }\n  };\n}\n\nfunction makeBitcoinDecoder(hrp: string, p2pkhVersions: base58CheckVersion[], p2shVersions: base58CheckVersion[]): (data: string) => Buffer {\n  const decodeBech32 = makeBech32SegwitDecoder(hrp);\n  const decodeBase58Check = makeBitcoinBase58CheckDecoder(p2pkhVersions, p2shVersions);\n  return (data: string) => {\n    if (data.toLowerCase().startsWith(hrp + '1')) {\n      return decodeBech32(data);\n    } else {\n      return decodeBase58Check(data);\n    }\n  };\n}\n\nconst bitcoinChain = (\n  name: string,\n  coinType: number,\n  hrp: string,\n  p2pkhVersions: base58CheckVersion[],\n  p2shVersions: base58CheckVersion[],\n) => ({\n  coinType,\n  decoder: makeBitcoinDecoder(hrp, p2pkhVersions, p2shVersions),\n  encoder: makeBitcoinEncoder(hrp, p2pkhVersions[0], p2shVersions[0]),\n  name,\n});\n\n// Similar to makeBitcoinEncoder but:\n// - Uses Bech32 without SegWit https://zips.z.cash/zip-0173\n// - Supports version field of more than one byte\nfunction makeZcashEncoder(hrp: string, p2pkhVersion: base58CheckVersion, p2shVersion: base58CheckVersion): (data: Buffer) => string {\n  const encodeBech32 = makeBech32Encoder(hrp);\n  const encodeBase58Check = makeBitcoinBase58CheckEncoder(p2pkhVersion, p2shVersion);\n  return (data: Buffer) => {\n    try {\n      return encodeBase58Check(data);\n    } catch {\n      return encodeBech32(data);\n    }\n  };\n}\n\n// Similar to makeBitcoinDecoder but uses makeZcashBase58CheckDecoder to support version field of more than one byte\nfunction makeZcashDecoder(hrp: string, p2pkhVersions: base58CheckVersion[], p2shVersions: base58CheckVersion[]): (data: string) => Buffer {\n  const decodeBase58Check = makeBitcoinBase58CheckDecoder(p2pkhVersions, p2shVersions);\n  const decodeBech32 = makeBech32Decoder(hrp);\n  return (data: string) => {\n    if (data.toLowerCase().startsWith(hrp)) {\n      return decodeBech32(data);\n    } else {\n      return decodeBase58Check(data);\n    }\n  };\n}\n\nconst zcashChain = (\n  name: string,\n  coinType: number,\n  hrp: string,\n  p2pkhVersions: base58CheckVersion[],\n  p2shVersions: base58CheckVersion[],\n) => ({\n  coinType,\n  decoder: makeZcashDecoder(hrp, p2pkhVersions, p2shVersions),\n  encoder: makeZcashEncoder(hrp, p2pkhVersions[0], p2shVersions[0]),\n  name,\n});\n\nfunction encodeCashAddr(data: Buffer): string {\n  switch (data.readUInt8(0)) {\n    case 0x76: // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n      if (\n        data.readUInt8(1) !== 0xa9 ||\n        data.readUInt8(data.length - 2) !== 0x88 ||\n        data.readUInt8(data.length - 1) !== 0xac\n      ) {\n        throw Error('Unrecognised address format');\n      }\n      return cashaddrEncode('bitcoincash', 0, data.slice(3, 3 + data.readUInt8(2)));\n    case 0xa9: // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n      if (data.readUInt8(data.length - 1) !== 0x87) {\n        throw Error('Unrecognised address format');\n      }\n      return cashaddrEncode('bitcoincash', 1, data.slice(2, 2 + data.readUInt8(1)));\n    default:\n      throw Error('Unrecognised address format');\n  }\n}\n\nfunction decodeNearAddr(data: string): Buffer {\n  const regex = /(^(([a-z\\d]+[\\-_])*[a-z\\d]+\\.)*([a-z\\d]+[\\-_])*[a-z\\d]+$)/g;\n  if(!regex.test(data)) {\n    throw Error('Invalid address string');\n  } else {\n    if(data.length > 64 || data.length < 2) {\n      throw Error('Invalid address format');\n    }\n    return Buffer.from(data);\n  }\n}\n\nfunction encodeNearAddr(data: Buffer): string {\n  const ndata = data.toString();\n  if(ndata.length > 64 || ndata.length < 2) {\n    throw Error('Invalid address format');\n  }\n  return ndata;\n}\n\nfunction decodeCashAddr(data: string): Buffer {\n  const { prefix, type, hash } = cashaddrDecode(data);\n  if (type === 0) {\n    return Buffer.concat([Buffer.from([0x76, 0xa9, 0x14]), Buffer.from(hash), Buffer.from([0x88, 0xac])]);\n  } else if (type === 1) {\n    return Buffer.concat([Buffer.from([0xa9, 0x14]), Buffer.from(hash), Buffer.from([0x87])]);\n  }\n  throw Error('Unrecognised address format');\n}\n\nfunction decodeBitcoinCash(data: string): Buffer {\n  const decodeBase58Check = makeBitcoinBase58CheckDecoder([[0x00]], [[0x05]]);\n  try {\n    return decodeBase58Check(data);\n  } catch {\n    return decodeCashAddr(data);\n  }\n}\n\nfunction grsCheckSumFn(buffer: Buffer): Buffer{\n  const rtn : string = groestl_2(buffer, 1, 1) as string\n  return Buffer.from(rtn)\n}\n\nfunction bs58grscheckEncode(payload:Buffer): string {\n  const checksum = grsCheckSumFn(payload)\n  return bs58EncodeNoCheck(Buffer.concat([\n    payload,\n    checksum\n  ], payload.length + 4))\n}\n// Lifted from https://github.com/ensdomains/address-encoder/pull/239/commits/4872330fba558730108d7f1e0d197cfef3dd9ca6\n// https://github.com/groestlcoin/bs58grscheck\nfunction decodeRaw (buffer: Buffer): Buffer {\n  const payload = buffer.slice(0, -4)\n  const checksum = buffer.slice(-4)\n  const newChecksum = grsCheckSumFn(payload)\n  /* tslint:disable:no-bitwise */\n  if (checksum[0] ^ newChecksum[0] |\n      checksum[1] ^ newChecksum[1] |\n      checksum[2] ^ newChecksum[2] |\n      checksum[3] ^ newChecksum[3]) {return Buffer.from([])};\n  /* tslint:enable:no-bitwise */\n  return payload\n}\n\nfunction bs58grscheckDecode(str: string): Buffer {\n  const buffer = bs58DecodeNoCheck(str);\n  const payload = decodeRaw(buffer)\n  if (payload.length === 0) {throw new Error('Invalid checksum');}\n  return payload\n}\n\nfunction makeBase58GrsCheckEncoder(p2pkhVersion: base58CheckVersion, p2shVersion: base58CheckVersion): (data: Buffer) => string {\n  return (data: Buffer) => {\n    let addr: Buffer;\n    switch (data.readUInt8(0)) {\n      case 0x76: // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n        if (\n          data.readUInt8(1) !== 0xa9 ||\n          data.readUInt8(data.length - 2) !== 0x88 ||\n          data.readUInt8(data.length - 1) !== 0xac\n        ) {\n          throw Error('Unrecognised address format');\n        }\n        addr = Buffer.concat([Buffer.from(p2pkhVersion), data.slice(3, 3 + data.readUInt8(2))]);\n        return bs58grscheckEncode(addr);\n      case 0xa9: // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n        if (data.readUInt8(data.length - 1) !== 0x87) {\n          throw Error('Unrecognised address format');\n        }\n        addr = Buffer.concat([Buffer.from(p2shVersion), data.slice(2, 2 + data.readUInt8(1))]);\n        return bs58grscheckEncode(addr);\n      default:\n        throw Error('Unrecognised address format');\n    }\n  };\n}\n\nfunction makeBase58GrsCheckDecoder(p2pkhVersions: base58CheckVersion[], p2shVersions: base58CheckVersion[]): (data: string) => Buffer {\n  return (data: string) => {\n    const addr = bs58grscheckDecode(data);\n    const checkVersion = (version: base58CheckVersion) => {\n      return version.every((value: number, index: number) => index < addr.length && value === addr.readUInt8(index))\n    }\n    if (p2pkhVersions.some(checkVersion)) {\n      return Buffer.concat([Buffer.from([0x76, 0xa9, 0x14]), addr.slice(p2pkhVersions[0].length), Buffer.from([0x88, 0xac])]);\n    } else if (p2shVersions.some(checkVersion)) {\n      return Buffer.concat([Buffer.from([0xa9, 0x14]), addr.slice(p2shVersions[0].length), Buffer.from([0x87])]);\n    }\n    throw Error('Unrecognised address format');\n  };\n}\n\nfunction makeGroestlcoinEncoder(hrp: string, p2pkhVersion: base58CheckVersion, p2shVersion: base58CheckVersion): (data: Buffer) => string {\n  const encodeBech32 = makeBech32SegwitEncoder(hrp);\n  const encodeBase58Check = makeBase58GrsCheckEncoder(p2pkhVersion, p2shVersion);\n  return (data: Buffer) => {\n    try {\n      return encodeBase58Check(data);\n    } catch {\n      return encodeBech32(data);\n    }\n  };\n}\n\nfunction makeGroestlcoinDecoder(hrp: string, p2pkhVersions: base58CheckVersion[], p2shVersions: base58CheckVersion[]): (data: string) => Buffer {\n  const decodeBech32 = makeBech32SegwitDecoder(hrp);\n  const decodeBase58Check = makeBase58GrsCheckDecoder(p2pkhVersions, p2shVersions);\n  return (data: string) => {\n    if (data.toLowerCase().startsWith(hrp + '1')) {\n      return decodeBech32(data);\n    } else {\n      return decodeBase58Check(data);\n    }\n  };\n}\n\nconst groestlcoinChain = (\n  name: string,\n  coinType: number,\n  hrp: string,\n  p2pkhVersions: base58CheckVersion[],\n  p2shVersions: base58CheckVersion[],\n) => ({\n  coinType,\n  decoder: makeGroestlcoinDecoder(hrp, p2pkhVersions, p2shVersions),\n  encoder: makeGroestlcoinEncoder(hrp, p2pkhVersions[0], p2shVersions[0]),\n  name,\n});\n\nfunction makeChecksummedHexEncoder(chainId?: number) {\n  return (data: Buffer) => rskToChecksumAddress(data.toString('hex'), chainId || null);\n}\n\nfunction makeChecksummedHexDecoder(chainId?: number) {\n  return (data: string) => {\n    const stripped = rskStripHexPrefix(data);\n    if (\n      !rskIsValidChecksumAddress(data, chainId || null) &&\n      stripped !== stripped.toLowerCase() &&\n      stripped !== stripped.toUpperCase()\n    ) {\n      throw Error('Invalid address checksum');\n    }\n    return Buffer.from(rskStripHexPrefix(data), 'hex');\n  };\n}\n\nconst hexChecksumChain = (name: string, coinType: number, chainId?: number) => ({\n  coinType,\n  decoder: makeChecksummedHexDecoder(chainId),\n  encoder: makeChecksummedHexEncoder(chainId),\n  name,\n});\n\nfunction makeBech32Encoder(prefix: string) {\n  return (data: Buffer) => bech32Encode(prefix, bech32ToWords(data));\n}\n\nfunction makeBech32Decoder(currentPrefix: string) {\n  return (data: string) => {\n    const { prefix, words } = bech32Decode(data);\n    if (prefix !== currentPrefix) {\n      throw Error('Unrecognised address format');\n    }\n    return Buffer.from(bech32FromWords(words));\n  };\n}\n\nconst bech32Chain = (name: string, coinType: number, prefix: string) => ({\n  coinType,\n  decoder: makeBech32Decoder(prefix),\n  encoder: makeBech32Encoder(prefix),\n  name,\n});\n\nfunction makeEosioEncoder(prefix: string): (data: Buffer) => string {\n  return (data: Buffer) => {\n    if (!eosPublicKey.isValid(data)) {\n      throw Error('Unrecognised address format');\n    }\n    const woPrefix = eosPublicKey.fromHex(data).toString();\n    return woPrefix.replace(/^.{3}/g, prefix);\n  }\n}\n\nfunction makeEosioDecoder(prefix: string): (data: string) => Buffer {\n  return (data: string) => {\n    if (!eosPublicKey.isValid(data)) {\n      throw Error('Unrecognised address format');\n    }\n    const regex = new RegExp(\"^.{\" + prefix.length + \"}\", \"g\");\n    const wPrefix = data.replace(regex, 'EOS');\n    return eosPublicKey(wPrefix).toBuffer();\n  }\n}\n\nconst eosioChain = (name: string, coinType: number, prefix: string) => ({\n  coinType,\n  decoder: makeEosioDecoder(prefix),\n  encoder: makeEosioEncoder(prefix),\n  name,\n});\n\nfunction b32encodeXemAddr(data: Buffer): string {\n  return b32encode(hex2a(data.toString('hex')));\n}\n\nfunction b32decodeXemAddr(data: string): Buffer {\n  if (!isValidXemAddress(data)) {\n    throw Error('Unrecognised address format');\n  }\n  const address = data\n    .toString()\n    .toUpperCase()\n    .replace(/-/g, '');\n  return b32decode(address);\n}\n\nfunction ksmAddrEncoder(data: Buffer): string {\n  return ss58Encode(Uint8Array.from(data), 2);\n}\n\nfunction dotAddrEncoder(data: Buffer): string {\n  return ss58Encode(Uint8Array.from(data), 0);\n}\n\nfunction ksmAddrDecoder(data: string): Buffer {\n  return Buffer.from(ss58Decode(data));\n}\n\nfunction ontAddrEncoder(data: Buffer): string {\n  return bs58Encode(Buffer.concat([Buffer.from([0x17]), data]))\n}\n\nfunction ontAddrDecoder(data: string): Buffer {\n  const address = bs58Decode(data)\n\n  switch (address.readUInt8(0)) {\n   case 0x17:\n     return address.slice(1);\n\n    default:\n      throw Error('Unrecognised address format');\n  }\n}\n\nfunction strDecoder(data: string): Buffer {\n  return decodeEd25519PublicKey('ed25519PublicKey', data);\n}\n\nfunction strEncoder(data: Buffer): string {\n  return encodeEd25519PublicKey('ed25519PublicKey', data);\n}\n\n// Referenced from the followings\n// https://tezos.stackexchange.com/questions/183/base58-encoding-decoding-of-addresses-in-micheline\n// https://tezos.gitlab.io/api/p2p.html?highlight=contract_id#contract-id-22-bytes-8-bit-tag\nfunction tezosAddressEncoder(data: Buffer): string {\n  if (data.length !== 22 && data.length !== 21) {\n    throw Error('Unrecognised address format');\n  }\n\n  let prefix: Buffer;\n  switch (data.readUInt8(0)) {\n    case 0x00:\n      if (data.readUInt8(1) === 0x00) {\n        prefix = Buffer.from([0x06, 0xa1, 0x9f]); // prefix tz1 equal 06a19f\n      } else if (data.readUInt8(1) === 0x01) {\n        prefix = Buffer.from([0x06, 0xa1, 0xa1]); // prefix tz2 equal 06a1a1\n      } else if (data.readUInt8(1) === 0x02) {\n        prefix = Buffer.from([0x06, 0xa1, 0xa4]); // prefix tz3 equal 06a1a4\n      } else {\n        throw Error('Unrecognised address format');\n      }\n      return bs58Encode(Buffer.concat([prefix, data.slice(2)]));\n    case 0x01:\n      prefix = Buffer.from([0x02, 0x5a, 0x79]); // prefix KT1 equal 025a79\n      return bs58Encode(Buffer.concat([prefix, data.slice(1, 21)]));\n    default:\n      throw Error('Unrecognised address format');\n  }\n}\n\nfunction tezosAddressDecoder(data: string): Buffer {\n  const address = bs58Decode(data).slice(3);\n  switch (data.substring(0, 3)) {\n    case 'tz1':\n      return Buffer.concat([Buffer.from([0x00, 0x00]), address]);\n    case 'tz2':\n      return Buffer.concat([Buffer.from([0x00, 0x01]), address]);\n    case 'tz3':\n      return Buffer.concat([Buffer.from([0x00, 0x02]), address]);\n    case 'KT1':\n      return Buffer.concat([Buffer.from([0x01]), address, Buffer.from([0x00])]);\n    default:\n      throw Error('Unrecognised address format');\n  }\n}\n\n// Reference from js library:\n// https://github.com/hashgraph/hedera-sdk-java/blob/120d98ac9cd167db767ed77bb52cefc844b09fc9/src/main/java/com/hedera/hashgraph/sdk/SolidityUtil.java#L26\nfunction hederaAddressEncoder(data: Buffer): string {\n  if (data.length !== 20) {\n    throw Error('Unrecognised address format');\n  }\n\n  const view = new DataView(data.buffer, 0);\n\n  const shard = view.getUint32(0);\n  const realm = view.getBigUint64(4);\n  const account = view.getBigUint64(12);\n\n  return [shard, realm, account].join('.');\n}\n\n// Reference from js library:\n// https://github.com/hashgraph/hedera-sdk-java/blob/120d98ac9cd167db767ed77bb52cefc844b09fc9/src/main/java/com/hedera/hashgraph/sdk/SolidityUtil.java#L26\nfunction hederaAddressDecoder(data: string): Buffer {\n  const buffer = Buffer.alloc(20);\n  const view = new DataView(buffer.buffer, 0, 20);\n\n  const components = data.split('.');\n  if (components.length !== 3) {\n    throw Error('Unrecognised address format');\n  }\n\n  const shard = Number(components[0]);\n  const realm = BigInt(components[1]);\n  const account = BigInt(components[2]);\n\n  view.setUint32(0, shard);\n  view.setBigUint64(4, realm);\n  view.setBigUint64(12, account);\n\n  return buffer;\n}\n\n// Reference from Lisk validator\n// https://github.com/LiskHQ/lisk-sdk/blob/master/elements/lisk-validator/src/validation.ts#L202\nfunction validateLiskAddress(address: string) {\n  if (address.length < 2 || address.length > 22) {\n    throw new Error('Address length does not match requirements. Expected between 2 and 22 characters.');\n  }\n\n  if (address[address.length - 1] !== 'L') {\n    throw new Error('Address format does not match requirements. Expected \"L\" at the end.');\n  }\n\n  if (address.includes('.')) {\n    throw new Error('Address format does not match requirements. Address includes invalid character: `.`.');\n  }\n}\n\nfunction liskAddressEncoder(data: Buffer): string {\n  const address = `${bigInt(data.toString('hex'), 16).toString(10)}L`;\n\n  return address;\n}\n\nfunction liskAddressDecoder(data: string): Buffer {\n  validateLiskAddress(data);\n\n  return Buffer.from(bigInt(data.slice(0, -1)).toString(16), 'hex');\n}\n  \nfunction seroAddressEncoder(data: Buffer): string {\n  const address =  bs58EncodeNoCheck(data);\n\n  return address;\n}\n\nfunction seroAddressDecoder(data: string): Buffer {\n  const bytes = bs58DecodeNoCheck(data);\n  if (bytes.length === 96) {\n    return  bytes;\n  }\n  throw Error('Unrecognised address format');\n}\n\n// https://github.com/wanchain/go-wanchain/blob/develop/common/types.go\nfunction wanToChecksumAddress(data: string): string {\n  const strippedData = rskStripHexPrefix(data);\n  const ndata = strippedData.toLowerCase();\n  \n  const hashed = new Keccak(256).update(Buffer.from(ndata)).digest();\n  let  ret = '0x';\n  const len = ndata.length;\n  let hashByte;\n  for(let i = 0; i < len; i++) {\n    hashByte = hashed[Math.floor(i / 2)]; \n    \n    if (i % 2 === 0) {\n      /* tslint:disable:no-bitwise */\n      hashByte = hashByte >> 4;\n    } else {\n      /* tslint:disable:no-bitwise */\n      hashByte &= 0xf;\n      /* tslint:enable:no-bitwise */\n    }\n\n    if(ndata[i] > '9' && hashByte <= 7) {\n      ret += ndata[i].toUpperCase();\n    } else {\n      ret += ndata[i];\n    }\n  }\n  return ret;\n}\n\nfunction isValidChecksumWanAddress(address: string ): boolean {\n  const isValid: boolean = /^0x[0-9a-fA-F]{40}$/.test(address);\n  return isValid && (wanToChecksumAddress(address) === address)\n}\n\nfunction wanChecksummedHexEncoder(data: Buffer): string {\n  return wanToChecksumAddress('0x'+data.toString('hex'));\n}\n\nfunction wanChecksummedHexDecoder(data: string): Buffer {\n  if(isValidChecksumWanAddress(data)) {\n    return Buffer.from(rskStripHexPrefix(data), 'hex');\n  \n  } else {\n    throw Error('Invalid address checksum');\n  \n  }\n\n}\n\nfunction calcCheckSum(withoutChecksum: Buffer): Buffer {\n  const checksum = (new Keccak(256).update(Buffer.from(blake2b(withoutChecksum, null, 32))).digest()).slice(0, 4);\n  return checksum; \n}\n\nfunction isByteArrayValid(addressBytes: Buffer): boolean {\n  // \"M\" for mainnet, \"T\" for test net. Just limited to mainnet\n  if(addressBytes.readInt8(0) !== 5 || addressBytes.readInt8(1) !== \"M\".charCodeAt(0) || addressBytes.length !== 26) {\n    return false;\n  }\n\n  const givenCheckSum = addressBytes.slice(-4);\n  const generatedCheckSum = calcCheckSum(addressBytes.slice(0 , -4));\n  return givenCheckSum.equals(generatedCheckSum);\n}\n\n// Reference:\n// https://github.com/virtualeconomy/v-systems/blob/master/src/main/scala/vsys/account/Address.scala\nfunction vsysAddressDecoder(data: string): Buffer {\n  let base58String = data;\n  if(data.startsWith('address:')){\n    base58String = data.substr(data.length);\n  }\n  if(base58String.length > 36) {\n    throw new Error('VSYS: Address length should not be more than 36');\n  }\n  const bytes = bs58DecodeNoCheck(base58String);\n\n  if(!isByteArrayValid(bytes)) {\n    throw new Error('VSYS: Invalid checksum');   \n  } \n  return bytes;\n}\n\nfunction vsysAddressEncoder(data: Buffer): string {\n  if(!isByteArrayValid(data)) {\n    throw new Error('VSYS: Invalid checksum');\n  }\n  return bs58EncodeNoCheck(data);\n}\n  \n// Reference:\n// https://github.com/handshake-org/hsd/blob/c85d9b4c743a9e1c9577d840e1bd20dee33473d3/lib/primitives/address.js#L297\nfunction hnsAddressEncoder(data: Buffer): string {\n  if (data.length !== 20) {\n    throw Error('P2WPKH must be 20 bytes');\n  }\n\n  const version = 0;\n  const words = [version].concat(bech32ToWords(data));\n  return bech32Encode('hs', words);\n}\n\n// Reference:\n// https://github.com/handshake-org/hsd/blob/c85d9b4c743a9e1c9577d840e1bd20dee33473d3/lib/primitives/address.js#L225\nfunction hnsAddressDecoder(data: string): Buffer {\n  const { prefix, words } = bech32Decode(data);\n\n  if (prefix !== 'hs') {\n    throw Error('Unrecognised address format');\n  }\n\n  const version = words[0];\n  const hash = bech32FromWords(words.slice(1));\n\n  if (version !== 0) {\n    throw Error('Bad program version');\n  }\n\n  if (hash.length !== 20) {\n    throw Error('Witness program hash is the wrong size');\n  }\n\n  return Buffer.from(hash);\n}\n\nfunction nasAddressEncoder(data: Buffer): string {\n  const checksum = (new SHA3(256).update(data).digest()).slice(0, 4);\n  \n  return bs58EncodeNoCheck(Buffer.concat([data, checksum]));\n}\n\nfunction nasAddressDecoder(data: string): Buffer {\n  const buf = bs58DecodeNoCheck(data);\n\n  if(buf.length !== 26 || buf[0] !== 25 || (buf[1] !== 87 && buf[1] !== 88)){\n    throw Error('Unrecognised address format');\n  }\n\n  const bufferData = buf.slice(0, 22);\n  const checksum = buf.slice(-4);\n  const checksumVerify = (new SHA3(256).update(bufferData).digest()).slice(0, 4);\n\n  if(!checksumVerify.equals(checksum)) {\n    throw Error('Invalid checksum');\n  }\n\n  return bufferData;\n}\n\n// Referenced from following\n// https://github.com/icon-project/icon-service/blob/master/iconservice/base/address.py#L219\nfunction icxAddressEncoder(data: Buffer): string {\n  if (data.length !== 21) {\n    throw Error('Unrecognised address format');\n  }\n  switch (data.readUInt8(0)) {\n    case 0x00:\n      return 'hx' + data.slice(1).toString('hex');\n    case 0x01:\n      return 'cx' + data.slice(1).toString('hex');\n    default:\n      throw Error('Unrecognised address format');\n  }\n}\n\n// Referenced from following\n// https://github.com/icon-project/icon-service/blob/master/iconservice/base/address.py#L238\nfunction icxAddressDecoder(data: string): Buffer {\n  const prefix = data.slice(0, 2)\n  const body = data.slice(2)\n  switch (prefix) {\n    case 'hx':\n      return Buffer.concat([Buffer.from([0x00]), Buffer.from(body, 'hex')]);\n    case 'cx':\n      return Buffer.concat([Buffer.from([0x01]), Buffer.from(body, 'hex')]);\n    default:\n      throw Error('Unrecognised address format');\n  }\n}\n\nfunction hntAddresEncoder(data: Buffer): string {\n  const buf = Buffer.concat([Buffer.from([0]), data]);\n\n  return bs58Encode(buf);\n}\n\nfunction hntAddressDecoder(data: string): Buffer {\n  const buf = bs58Decode(data);\n\n  const version = buf[0];\n  if(version !== 0x00){\n    throw Error('Invalid version byte');\n  }\n\n  return buf.slice(1);\n}\n\nfunction wavesAddressDecoder(data: string): Buffer {\n  const buffer = bs58DecodeNoCheck(data);\n\n  if(buffer[0] !== 1) {\n    throw Error('Bad program version');\n  }\n\n  if (buffer[1] !== 87 || buffer.length !== 26) {\n    throw Error('Unrecognised address format');\n  }\n\n  const bufferData = buffer.slice(0, 22);\n  const checksum = buffer.slice(22, 26);\n  const checksumVerify = (new Keccak(256).update(Buffer.from(blake2b(bufferData, null, 32))).digest()).slice(0, 4);\n\n  if(!checksumVerify.equals(checksum)) {\n    throw Error('Invalid checksum');\n  }\n\n  return buffer;\n\n}\n\nconst glog = [0, 0, 1, 18, 2, 5, 19, 11, 3, 29, 6, 27, 20, 8, 12, 23, 4, 10, 30, 17, 7, 22, 28, 26, 21, 25, 9, 16, 13, 14, 24, 15];\nconst gexp = [1, 2, 4, 8, 16, 5, 10, 20, 13, 26, 17, 7, 14, 28, 29, 31, 27, 19, 3, 6, 12, 24, 21, 15, 30, 25, 23, 11, 22, 9, 18, 1];\nfunction gmult(a: number, b: number): number {\n  if (a === 0 || b === 0) {return 0;}\n\n  return gexp[(glog[a] + glog[b]) % 31];\n}\n\nfunction ardrCheckSum(codeword: number[]): boolean {\n  let sum = 0;\n\n  for (let i = 1; i < 5; i++) {\n    let t = 0;\n    for (let j = 0; j < 31; j++) {\n      if (j > 12 && j < 27) {continue;}\n\n      let pos = j;\n      if (j > 26) {pos -= 14;}\n\n      // tslint:disable-next-line:no-bitwise\n      t ^= gmult(codeword[pos], gexp[(i * j) % 31]);\n    \n  }\n    // tslint:disable-next-line:no-bitwise\n    sum |= t;\n\n  }\n  return sum === 0;\n}\n\nconst alphabet = '23456789ABCDEFGHJKLMNPQRSTUVWXYZ';\nconst cwmap = [3, 2, 1, 0, 7, 6, 5, 4, 13, 14, 15, 16, 12, 8, 9, 10, 11];\n\nfunction ardrAddressDecoder(data: string): Buffer {\n  const codeword = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\n  data = data.replace(/(^\\s+)|(\\s+$)/g, '').toUpperCase();\n  const prefix = data.slice(0, 5);\n  if (prefix !== 'ARDOR' || data.split(\"-\").length !== 5) {\n    throw Error('Unrecognised address format');\n  } else {\n    data = data.substr(data.indexOf(\"-\"));\n  }\n\n  const clean = [];\n  let count = 0;\n\n  for (const char of data) {\n    const pos = alphabet.indexOf(char);\n\n    if (pos >= 0) {\n      clean[count++] = pos;\n      if (count > 17) {\n        throw Error('Unrecognised address format');    \n      }\n    }\n  }\n\n  for (let i = 0, j = 0; i < count; i++) {\n    codeword[cwmap[j++]] = clean[i];\n  }\n  \n  if (!ardrCheckSum(codeword)) {\n    throw Error('Unrecognised address format');\n  }\n\n  return Buffer.from(codeword);\n}\n\n\nfunction ardrAddressEncoder(data: Buffer): string {\n  const dataStr = data.toString('hex');\n  const arr = [];\n  \n  for(let i = 0, j = 0; i < dataStr.length; i = i + 2) {\n    arr[cwmap[j++]] = 16 * parseInt(dataStr[i], 16) + parseInt(dataStr[i + 1], 16);\n  }\n\n  let acc = \"\";\n  const rtn = [];\n  for(let i = 0; i < 17; i++) {\n    if(arr[i] >= alphabet.length || arr.length !== 17) {\n      throw Error('Unrecognised address format');\n    }\n    acc += alphabet[arr[i]];\n\n    if(i < 12 && (i + 1) % 4 === 0 || i === 16 ) {\n      rtn.push(acc);\n      acc = \"\";\n    } \n\n  }\n  return `ARDOR-${rtn.join(\"-\")}`;\n\n}\n\nfunction bcnAddressEncoder(data: Buffer): string {\n  const checksum = (new Keccak(256).update(data).digest()).slice(0, 4);\n\n  return xmrAddressEncoder(Buffer.concat([data, checksum]));\n}\n\nfunction bcnAddressDecoder(data: string): Buffer {\n  const buf = xmrAddressDecoder(data);\n\n  const tag = buf.slice(0, -68).toString('hex');\n\n  if(buf.length < 68 || (tag !== '06' && tag !== 'cef622')) {\n    throw Error('Unrecognised address format');\n  }\n\n  const checksum = buf.slice(-4);\n  const checksumVerify = (new Keccak(256).update(buf.slice(0, -4)).digest()).slice(0, 4);\n\n  if(!checksumVerify.equals(checksum)) {\n    throw Error('Invalid checksum');\n  }\n\n  return buf.slice(0, -4);\n}\n\nconst AlgoChecksumByteLength = 4;\nconst AlgoAddressByteLength = 36;\n\n// Returns 4 last byte (8 chars) of sha512_256(publicKey)\nfunction algoChecksum(pk: Buffer): string {\n  return sha512_256\n    .update(pk)\n    .hex()\n    .substr(-AlgoChecksumByteLength * 2);\n}\n\nfunction algoDecode(data: string): Buffer {\n  const decoded = b32decode(data);\n\n  if (decoded.length !== AlgoAddressByteLength) {\n    throw Error('Unrecognised address format');\n  }\n\n  const publicKey = decoded.slice(0, -AlgoChecksumByteLength);\n  const checksum = decoded.slice(-AlgoChecksumByteLength);\n  const expectedChecksum = algoChecksum(publicKey);\n\n  if (checksum.toString('hex') !== expectedChecksum) {\n    throw Error('Unrecognised address format');\n  }\n\n  return publicKey;\n}\n\nfunction algoEncode(data: Buffer): string {\n  // Calculate publicKey checksum\n  const checksum = algoChecksum(data);\n\n  // Append publicKey and checksum\n  const addr = b32encode(hex2a(data.toString('hex').concat(checksum)));\n\n  // Removing the extra '='\n  const cleanAddr = addr.replace(/=/g, '');\n  return cleanAddr;\n}\n\nfunction arAddressEncoder(data: Buffer): string {\n  return data.toString('base64')\n    .replace(/\\+/g, \"-\")\n    .replace(/\\//g, \"_\")\n    .replace(/\\=/g, \"\");\n}\n\nfunction arAddressDecoder(data: string): Buffer {\n  data = data.replace(/\\-/g, \"+\").replace(/\\_/g, \"/\");\n\n  const padding = data.length % 4 === 0\n    ? 0\n    : 4 - (data.length % 4);\n\n  data = data.concat(\"=\".repeat(padding));\n\n  return Buffer.from(data, 'base64');\n}\n\nfunction bsvAddresEncoder(data: Buffer): string {\n  const buf = Buffer.concat([Buffer.from([0]), data]);\n\n  return bs58Encode(buf);\n}\n\nfunction bsvAddressDecoder(data: string): Buffer {\n  const buf = bs58Decode(data);\n\n  if(buf.length !== 21) {\n    throw Error('Unrecognised address format');\n  }\n\n  const version = buf[0];\n  if(version !== 0x00){\n    throw Error('Invalid version byte');\n  }\n\n  return buf.slice(1);\n}\n\nfunction aeAddressEncoder(data: Buffer): string {\n  return 'ak_' + bs58Encode(data.slice(2));\n}\n\nfunction aeAddressDecoder(data: string): Buffer {\n  return Buffer.concat([Buffer.from('0x'), bs58Decode(data.split('_')[1])]);\n}\n\nfunction arkAddressDecoder(data: string): Buffer {\n  const buffer = bs58Decode(data);\n\n  if (buffer[0] !== 23) {\n    throw Error('Unrecognised address format');\n  }\n\n  return buffer;\n}\n\nfunction nanoAddressEncoder(data: Buffer): string {\n  const encoded = nanoBase32Encode(Uint8Array.from(data));\n  const checksum = blake2b(data, null, 5).reverse();\n  const checksumEncoded = nanoBase32Encode(checksum);\n\n  const address = `nano_${encoded}${checksumEncoded}`;\n\n  return address;\n}\n\nfunction nanoAddressDecoder(data: string): Buffer {\n  const decoded = nanoBase32Decode(data.slice(5));\n\n  return Buffer.from(decoded).slice(0, -5);\n}\n\nfunction etnAddressEncoder(data: Buffer): string {\n  const buf = Buffer.concat([Buffer.from([18]), data]);\n\n  const checksum = (new Keccak(256).update(buf).digest()).slice(0, 4);\n\n  return xmrAddressEncoder(Buffer.concat([buf, checksum]));\n}\n\nfunction etnAddressDecoder(data: string): Buffer {\n  const buf = xmrAddressDecoder(data);\n  \n  if(buf[0] !== 18){\n    throw Error('Unrecognised address format');\n  }\n\n  const checksum = buf.slice(65, 69);\n  const checksumVerify = (new Keccak(256).update(buf.slice(0, 65)).digest()).slice(0, 4);\n  \n  if(!checksumVerify.equals(checksum)) {\n    throw Error('Invalid checksum');\n  }\n\n  return buf.slice(1, 65);\n}\n\nfunction zenEncoder(data: Buffer): string {\n  if (\n    !data.slice(0, 2).equals(Buffer.from([0x20, 0x89])) && // zn\n    !data.slice(0, 2).equals(Buffer.from([0x1c, 0xb8])) && // t1\n    !data.slice(0, 2).equals(Buffer.from([0x20, 0x96])) && // zs\n    !data.slice(0, 2).equals(Buffer.from([0x1c, 0xbd])) && // t3\n    !data.slice(0, 2).equals(Buffer.from([0x16, 0x9a])) // zc\n  ) {\n    throw Error('Unrecognised address format');\n  }\n\n  return bs58Encode(data);\n}\n\nfunction zenDecoder(data: string): Buffer {\n  if (\n    !data.startsWith('zn') &&\n    !data.startsWith('zs') &&\n    !data.startsWith('zc') &&\n    !data.startsWith('t1') &&\n    !data.startsWith('t3')\n  ) {\n    throw Error('Unrecognised address format');\n  }\n\n  return bs58Decode(data);\n}\n\nfunction aionDecoder(data: string): Buffer {\n  let address = data;\n\n  if (address == null || address.length === 0 || address.length < 64) {\n    throw Error('Unrecognised address format');\n  }\n\n  if (address.startsWith('0x')) {\n    address = address.slice(2);\n  }\n\n  if (address.startsWith('a0')) {\n    if (address.length !== 64 || !address.substring(2).match('^[0-9A-Fa-f]+$')) {\n      throw Error('Unrecognised address format');\n    }\n  }\n\n  return Buffer.from(address, 'hex');\n}\n\nfunction aionEncoder(data: Buffer): string {\n  return '0x'.concat(data.toString('hex'));\n}\n\n// Remove staring zeros from buffer\nfunction flowDecode(data: string): Buffer {\n  if (!isValidAddress(BigInt(data), ChainID.mainnet)) {\n    throw Error('Unrecognised address format');\n  }\n  return Buffer.from(rskStripHexPrefix(data).replace(/^0+/, ''), 'hex');\n}\n\n// https://github.com/onflow/flow-go/blob/master/model/flow/address.go#L51\n// If b is larger than 8, b will be cropped from the left.\n// If b is smaller than 8, b will be appended by zeroes at the front.\nfunction flowEncode(data: Buffer): string {\n  const AddressLength = 8;\n  let addrBytes = Buffer.alloc(AddressLength, 0x00);\n\n  if (data.length > AddressLength) {\n    addrBytes = data.slice(-AddressLength);\n  }\n  data.copy(addrBytes, AddressLength - data.length);\n\n  return '0x' + addrBytes.toString('hex').toLowerCase();\n}\n\n/* tslint:disable:no-bitwise */\nfunction nulsAddressEncoder(data: Buffer): string {\n  const chainId = data[0] & 0xff | (data[1] & 0xff) << 8;\n  const tempBuffer = Buffer.allocUnsafe(data.length + 1);\n\n  let temp = 0;\n  let xor = 0x00;\n  for(let i = 0; i < data.length; i++) {\n    temp = data[i];\n    temp = temp > 127 ? temp - 256 : temp;\n    tempBuffer[i] = temp;\n    xor ^= temp;\n  }\n  tempBuffer[data.length] = xor;\n\n  let prefix = \"\";\n  if(1 === chainId) {\n    prefix = 'NULS';\n  } else if (2 === chainId) {\n    prefix = 'tNULS';\n  } else {\n    const chainIdBuffer = Buffer.concat([Buffer.from([0xFF & chainId >> 0]), Buffer.from([0xFF & chainId >> 8])]);\n    prefix = bs58EncodeNoCheck(chainIdBuffer).toUpperCase();\n  }\n\n  const constant = ['a', 'b', 'c', 'd', 'e'];\n  return prefix + constant[prefix.length - 1] + bs58EncodeNoCheck(tempBuffer);\n}\n\nfunction nulsAddressDecoder(data: string): Buffer {\n  if(data.startsWith('NULS')) {\n    data = data.substring(5);\n  } else if (data.startsWith('tNULS')) {\n    data = data.substring(6);\n  } else {\n    for(let i = 0; i < data.length; i++) {\n      const val = data.charAt(i);\n      if(val.charCodeAt(0) >= 97) {\n        data = data.substring(i + 1);\n        break;\n      }\n    }\n  }\n\n  const bytes = bs58DecodeNoCheck(data);\n\n  let temp = 0;\n  let xor = 0x00;\n  for(let i = 0; i < bytes.length - 1; i++) {\n    temp = bytes[i];\n    temp = temp > 127 ? temp - 256 : temp;\n    bytes[i] = temp;\n    xor ^= temp;\n  }\n\n  if(xor < 0) {\n    xor = 256 + xor;\n  }\n\n  if(xor !== bytes[bytes.length - 1]) {\n    throw Error('Unrecognised address format');\n  }\n\n  return bytes.slice(0, -1);\n}\n/* tslint:enable:no-bitwise */\n\nconst SIA_HASH_SIZE = 32;\nconst SIA_CHECKSUM_SIZE = 6;\nconst SIA_BLAKE2B_LEN = 32;\n\nfunction siaAddressEncoder(data: Buffer): string {\n  const checksum = blake2bHex(data, null, SIA_BLAKE2B_LEN).slice(0, SIA_CHECKSUM_SIZE * 2);\n  return data.toString('hex') + checksum;\n}\n\nfunction siaAddressDecoder(data: string): Buffer {\n  if (data.length !== (SIA_CHECKSUM_SIZE + SIA_HASH_SIZE) * 2) {\n    throw Error('Unrecognised address format');\n  }\n\n  const hash = Buffer.from(data.slice(0, SIA_HASH_SIZE * 2), 'hex');\n  const checksum = data.slice(SIA_HASH_SIZE * 2);\n  const expectedChecksum = blake2bHex(hash, null, SIA_BLAKE2B_LEN).slice(0, SIA_CHECKSUM_SIZE * 2);\n\n  if (checksum !== expectedChecksum) {\n    throw Error('Unrecognised address format');\n  }\n\n  return hash;\n}\n\nconst getConfig = (name: string, coinType: number, encoder: EnCoder, decoder: DeCoder) => {\n  return {\n    coinType,\n    decoder,\n    encoder,\n    name,\n  };\n};\n\n// Ordered by coinType\nexport const formats: IFormat[] = [\n  bitcoinChain('BTC', 0, 'bc', [[0x00]], [[0x05]]),\n  bitcoinChain('LTC', 2, 'ltc', [[0x30]], [[0x32], [0x05]]),\n  bitcoinBase58Chain('DOGE', 3, [[0x1e]], [[0x16]]),\n  bitcoinBase58Chain('RDD', 4, [[0x3d]], [[0x05]]),\n  bitcoinBase58Chain('DASH', 5, [[0x4c]], [[0x10]]),\n  bitcoinBase58Chain('PPC', 6, [[0x37]], [[0x75]]),\n  getConfig('NMC', 7, bs58Encode, bs58Decode),\n  bitcoinBase58Chain('VIA', 14, [[0x47]], [[0x21]]),\n  groestlcoinChain('GRS', 17, 'grs', [[0x24]], [[0x05]]),\n  bitcoinChain('DGB', 20, 'dgb', [[0x1e]], [[0x3f]]),\n  bitcoinChain('MONA', 22, 'mona', [[0x32]], [[0x37], [0x05]]),\n  getConfig('DCR', 42, bs58EncodeNoCheck, bs58DecodeNoCheck),\n  getConfig('XEM', 43, b32encodeXemAddr, b32decodeXemAddr),\n  bitcoinBase58Chain('AIB', 55, [[0x17]], [[0x05]]),\n  bitcoinChain('SYS', 57, 'sys', [[0x3f]], [[0x05]]),\n  hexChecksumChain('ETH', 60),\n  hexChecksumChain('ETC', 61),\n  getConfig('ICX', 74, icxAddressEncoder, icxAddressDecoder),\n  bitcoinBase58Chain('XVG',77, [[0x1E]], [[0x21]]),\n  bitcoinBase58Chain('STRAT', 105, [[0x3F]], [[0x7D]]),\n  getConfig('ARK', 111, bs58Encode, arkAddressDecoder),\n  bech32Chain('ATOM', 118, 'cosmos'),\n  bech32Chain('ZIL', 119, 'zil'),\n  bech32Chain('EGLD', 120, 'erd'),\n  getConfig('ZEN', 121, zenEncoder, zenDecoder),\n  getConfig('XMR', 128, xmrAddressEncoder, xmrAddressDecoder),\n  zcashChain('ZEC', 133, 'zs', [[0x1c, 0xb8]], [[0x1c, 0xbd]]),\n  getConfig('LSK', 134, liskAddressEncoder, liskAddressDecoder),\n  eosioChain('STEEM', 135, 'STM'),\n  bitcoinBase58Chain('FIRO', 136, [[0x52]], [[0x07]]),\n  hexChecksumChain('RSK', 137, 30),\n  bitcoinBase58Chain('KMD', 141, [[0x3C]], [[0x55]]),\n  getConfig('XRP', 144, data => xrpCodec.encodeChecked(data), data => xrpCodec.decodeChecked(data)),\n  getConfig('BCH', 145, encodeCashAddr, decodeBitcoinCash),\n  getConfig('XLM', 148, strEncoder, strDecoder),\n  getConfig('BTM', 153, makeBech32SegwitEncoder('bm'), makeBech32SegwitDecoder('bm')),\n  bitcoinChain('BTG', 156, 'btg', [[0x26]], [[0x17]]),\n  getConfig('NANO', 165, nanoAddressEncoder, nanoAddressDecoder),\n  bitcoinBase58Chain('RVN', 175, [[0x3c]], [[0x7a]]),\n  hexChecksumChain('POA', 178),\n  eosioChain('EOS', 194, 'EOS'),\n  getConfig('TRX', 195, bs58Encode, bs58Decode),\n  getConfig('BCN', 204, bcnAddressEncoder, bcnAddressDecoder),\n  eosioChain('FIO', 235, 'FIO'),\n  getConfig('BSV', 236, bsvAddresEncoder, bsvAddressDecoder),\n  getConfig('NEO', 239, bs58Encode, bs58Decode),\n  getConfig('NIM', 242, nimqEncoder, nimqDecoder),\n  hexChecksumChain('EWT', 246),\n  getConfig('ALGO', 283, algoEncode, algoDecode),\n  getConfig('IOST', 291, bs58EncodeNoCheck, bs58DecodeNoCheck),\n  bitcoinBase58Chain('DIVI', 301, [[0x1e]], [[0xd]]),\n  bech32Chain('IOTX', 304, 'io'),\n  eosioChain('BTS', 308, 'BTS'),\n  bech32Chain('CKB', 309, 'ckb'),\n  bech32Chain('LUNA', 330, 'terra'),\n  getConfig('DOT', 354, dotAddrEncoder, ksmAddrDecoder),\n  getConfig('VSYS', 360, vsysAddressEncoder, vsysAddressDecoder),\n  eosioChain('ABBC', 367, 'ABBC'),\n  getConfig('NEAR', 397, encodeNearAddr, decodeNearAddr),\n  getConfig('ETN', 415, etnAddressEncoder, etnAddressDecoder),\n  getConfig('AION', 425, aionEncoder, aionDecoder),\n  getConfig('KSM', 434, ksmAddrEncoder, ksmAddrDecoder),\n  getConfig('AE', 457, aeAddressEncoder, aeAddressDecoder),\n  bech32Chain('KAVA', 459, 'kava'),\n  getConfig('FIL', 461, filAddrEncoder, filAddrDecoder),\n  getConfig('AR', 472, arAddressEncoder, arAddressDecoder),\n  bitcoinBase58Chain('CCA', 489, [[0x0b]], [[0x05]]),\n  hexChecksumChain('THETA', 500),\n  getConfig('SOL', 501, bs58EncodeNoCheck, bs58DecodeNoCheck),\n  getConfig('XHV', 535, xmrAddressEncoder, xmrAddressDecoder),\n  getConfig('FLOW', 539, flowEncode, flowDecode),\n  bech32Chain('IRIS', 566, 'iaa'),\n  bitcoinBase58Chain('LRG', 568, [[0x1e]], [[0x0d]]),\n  getConfig('SERO', 569, seroAddressEncoder, seroAddressDecoder),\n  getConfig('BDX', 570, xmrAddressEncoder, xmrAddressDecoder),\n  bitcoinChain('CCXX', 571, 'ccx', [[0x89]], [[0x4b], [0x05]]),\n  getConfig('SRM', 573, bs58EncodeNoCheck, bs58DecodeNoCheck),\n  getConfig('VLX', 574, bs58EncodeNoCheck, bs58DecodeNoCheck),\n  bitcoinBase58Chain('BPS', 576, [[0x00]], [[0x05]]),\n  hexChecksumChain('TFUEL', 589),\n  bech32Chain('GRIN', 592, 'grin'),\n  hexChecksumChain('XDAI', 700),\n  hexChecksumChain('VET', 703),\n  bech32Chain('BNB', 714, 'bnb'),\n  hexChecksumChain('CLO', 820),\n  eosioChain('HIVE', 825, 'STM'),\n  hexChecksumChain('TOMO', 889),\n  getConfig('HNT', 904, hntAddresEncoder, hntAddressDecoder),\n  bitcoinChain('BCD', 999, 'bcd', [[0x00]], [[0x05]]),\n  hexChecksumChain('TT', 1001),\n  bech32Chain('ONE', 1023, 'one'),\n  getConfig('ONT', 1024, ontAddrEncoder, ontAddrDecoder),\n  {\n    coinType: 1729,\n    decoder: tezosAddressDecoder,\n    encoder: tezosAddressEncoder,\n    name: 'XTZ',\n  },\n  bech32Chain('ADA', 1815, 'addr'),\n  getConfig('SC', 1991, siaAddressEncoder, siaAddressDecoder),\n  getConfig('QTUM', 2301, bs58Encode, bs58Decode),\n  eosioChain('GXC', 2303, 'GXC'),\n  getConfig('ELA', 2305, bs58EncodeNoCheck, bs58DecodeNoCheck),\n  getConfig('NAS', 2718, nasAddressEncoder, nasAddressDecoder),\n  {\n    coinType: 3030,\n    decoder: hederaAddressDecoder,\n    encoder: hederaAddressEncoder,\n    name: 'HBAR',\n  },\n  getConfig('IOTA', 4218, bs58Encode, bs58Decode),\n  getConfig('HNS', 5353, hnsAddressEncoder, hnsAddressDecoder),\n  hexChecksumChain('GO', 6060),\n  getConfig('NULS', 8964, nulsAddressEncoder, nulsAddressDecoder),\n  bech32Chain('AVAX', 9000, 'avax'),\n  hexChecksumChain('NRG', 9797),\n  getConfig('ARDR', 16754, ardrAddressEncoder, ardrAddressDecoder),\n  zcashChain('ZEL', 19167, 'za', [[0x1c, 0xb8]], [[0x1c, 0xbd]]),\n  hexChecksumChain('CELO', 52752),\n  bitcoinBase58Chain('WICC', 99999, [[0x49]], [[0x33]]),\n  getConfig('WAN', 5718350, wanChecksummedHexEncoder, wanChecksummedHexDecoder),\n  getConfig('WAVES', 5741564, bs58EncodeNoCheck, wavesAddressDecoder),\n];\n\nexport const formatsByName: { [key: string]: IFormat } = Object.assign({}, ...formats.map(x => ({ [x.name]: x })));\nexport const formatsByCoinType: { [key: number]: IFormat } = Object.assign(\n  {},\n  ...formats.map(x => ({ [x.coinType]: x })),\n);\n","'use strict';\n\n// Copied from https://github.com/zelcash/groestl-hash-js\nimport  { groestll } from './groestl';\nimport { int32ArrayToHexString, int32Buffer2Bytes}  from './helper.js';\n\n\nexport function groestl_2(str,format, output) {\n  var a = groestll(str,format,2);\n  a = groestll(a,2,2);\n  a = a.slice(0,8);\n  if (output === 2) {\n    return a;\n  }\n  else if (output === 1) {\n    return int32Buffer2Bytes(a);\n  }\n  else {\n    return int32ArrayToHexString(a);\n  }\n}"],"names":["bigInt","undefined","BASE","MAX_INT","MAX_INT_ARR","smallToArray","LOG_MAX_INT","Math","log","Integer","v","radix","parseValue","parseBase","BigInteger","value","sign","this","isSmall","SmallInteger","isPrecise","n","floor","arrayToSmall","arr","trim","length","compareAbs","i","createArray","x","Array","truncate","ceil","add","a","b","sum","l_a","l_b","r","carry","base","push","addAny","addSmall","l","subtract","difference","a_l","b_l","borrow","subtractSmall","multiplyLong","product","a_i","j","multiplySmall","shiftLeft","concat","multiplySmallAndArray","square","divModSmall","lambda","q","remainder","divisor","quotient","divModAny","self","Error","negate","abs","comparison","quotientDigit","shift","result","divisorMostSignificantDigit","divMod1","guess","xlen","highx","check","part","unshift","reverse","divMod2","qSign","mod","mSign","isBasicPrime","isUnit","equals","isEven","isDivisibleBy","lesser","millerRabinTest","d","nPrev","prev","divide","next","modPow","prototype","Object","create","plus","subtractAny","minus","small","multiply","l1","l2","multiplyKaratsuba","y","max","slice","c","ac","bd","abcd","times","_multiplyBySmall","divmod","over","pow","toString","exp","isZero","isPositive","isOdd","compareTo","compare","Infinity","eq","neq","notEquals","gt","greater","lt","geq","greaterOrEquals","leq","lesserOrEquals","isNegative","isPrime","strict","bits","bitLength","logN","t","isProbablePrime","iterations","randBetween","modInv","lastT","lastR","zero","newT","one","newR","powersOfTwo","powers2Length","highestPower2","shift_isSmall","bitwise","fn","xSign","ySign","xRem","not","yRem","xDigit","yDigit","xDivMod","yDivMod","toJSNumber","roughLOB","min","gcd","String","shiftRight","remQuo","and","or","xor","integerLogarithm","tmp","p","e","text","absBase","toLowerCase","test","charCodeAt","parseInt","isNaN","digits","charCode","start","parseBaseFromArray","val","stringify","digit","charAt","toBase","apply","map","valueOf","neg","Number","out","left","toBaseString","join","parseStringValue","split","decimalPlace","indexOf","parseNumberValue","toArray","str","toJSON","minusOne","lcm","isInstance","low","range","random","restricted","top","fromArray","module","hasOwnProperty","Bn","require","Stream","buf","Buffer","from","buffer","bytesRead","read","size","data","write","Address","protocol","payload","getChecksum","ingest","blake2b","filEncode","network","address","addressString","decoded","stream","byt","num","ior","shln","readBn","protocolByte","checksum","bytes","bytes2a","hex2a","bytes32encoded","b32encode","replace","filNewAddress","input","parityCheckMatrixColumns","BigInt","ChainID","codeword","u64","h","hi","lo","u","xor64","arguments","bufferInsert","bufferOffset","len","dataOffset","bytes2Int64Buffer","int32Buffer2Bytes","set","oWord","lowest","lowMid","highMid","highest","addOne","multiplier","obj","__isLong__","isFinite","fromNumber","a32","a16","a00","b32","b16","b00","c48","c32","c16","c00","clone","toMoveUp","setShiftLeft","bitsOff32","toMoveDown","rotateLeft","rotateRight","setRotateLeft","setRotateRight","newHigh","setFlip","setxorOne","setxor64","keyStr","b64Decode","chr2","chr3","enc1","enc2","enc3","enc4","output","T0","T1","T2","T3","T4","T5","T6","T7","B64","j64","nj64","r64","compress","int64buf","state","g","m","uu","temp","ii","groestl","ctx","ptr","V","clen","int64Buf","count","groestll","format","msg","s","string2bytes","padLen","offset","uint64","pad","bufferSet","bufferInsert64","final","groestlClose","array","int32ArrayToHexString","b58","alphabetStr","alphabet","encodedBlockSizes","alphabetSize","xmrAddressEncoder","bin","hex","res","Uint8Array","hexToBin","fullBlockCount","lastBlockSize","resSize","encodeBlock","subarray","keys","fromCharCode","binToStr","xmrAddressDecoder","strToBin","lastBlockDecodedSize","dataU","decodeBlock","binToHex","nimqCheck","ccode","code","toUpperCase","substr","_ibanCheck","makeBitcoinBase58CheckEncoder","p2pkhVersion","p2shVersion","addr","readUInt8","bs58Encode","makeBitcoinBase58CheckDecoder","p2pkhVersions","p2shVersions","bs58Decode","checkVersion","version","every","index","some","twopow8","uint8BeTo64","div","resNum","order","uint64ToBe8","bitcoinBase58Chain","name","coinType","decoder","encoder","makeBech32SegwitEncoder","hrp","words","bech32ToWords","bech32Encode","makeBech32SegwitDecoder","bech32Decode","prefix","script","bech32FromWords","makeBitcoinEncoder","encodeBech32","encodeBase58Check","makeBitcoinDecoder","decodeBech32","decodeBase58Check","startsWith","bitcoinChain","makeZcashEncoder","makeBech32Encoder","makeZcashDecoder","makeBech32Decoder","zcashChain","grsCheckSumFn","rtn","bs58grscheckEncode","bs58EncodeNoCheck","makeChecksummedHexEncoder","chainId","rskToChecksumAddress","makeChecksummedHexDecoder","stripped","rskStripHexPrefix","rskIsValidChecksumAddress","hexChecksumChain","currentPrefix","bech32Chain","makeEosioEncoder","eosPublicKey","isValid","fromHex","makeEosioDecoder","regex","RegExp","wPrefix","toBuffer","eosioChain","ksmAddrDecoder","ss58Decode","wanToChecksumAddress","hashByte","ndata","hashed","Keccak","update","digest","ret","isByteArrayValid","addressBytes","readInt8","withoutChecksum","givenCheckSum","generatedCheckSum","glog","gexp","cwmap","algoChecksum","pk","sha512_256","getConfig","formats","newChecksum","decodeRaw","bs58DecodeNoCheck","bs58grscheckDecode","makeBase58GrsCheckDecoder","makeGroestlcoinDecoder","makeBase58GrsCheckEncoder","isValidXemAddress","b32decode","body","includes","validateLiskAddress","xrpCodec","encodeChecked","decodeChecked","cashaddrEncode","cashaddrDecode","type","hash","decodeCashAddr","encodeEd25519PublicKey","decodeEd25519PublicKey","encoded","nanoBase32Encode","nanoBase32Decode","tag","base32Part","byte","toBase32","base32","symbol","charmap","forEach","char","fromBase32","publicKey","expectedChecksum","ss58Encode","base58String","substring","match","checkAddressString","raw","bigNum","maskn","toNumber","ishrn","expect","payloadChecksum","addressObj","filDecode","repeat","addrBytes","alloc","copy","chain","codeWord","parity","isValidAddress","mainnet","blake2bHex","SIA_CHECKSUM_SIZE","SIA_HASH_SIZE","SHA3","bufferData","view","DataView","components","shard","realm","account","setUint32","setBigUint64","getUint32","getBigUint64","tempBuffer","allocUnsafe","chainIdBuffer","dataStr","acc","clean","pos","ardrCheckSum","formatsByName","assign","formatsByCoinType"],"mappings":"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"}