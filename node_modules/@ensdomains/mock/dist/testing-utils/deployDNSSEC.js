"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _utils = require("./utils");

var ROOT_NODE = '0x00000000000000000000000000000000';

function deployDNSSEC(_x, _x2, _x3) {
  return _deployDNSSEC.apply(this, arguments);
}

function _deployDNSSEC() {
  _deployDNSSEC = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(web3, accounts, ens) {
    var sha3, deploy, namehash, RSASHA256Algorithm, RSASHA1Algorithm, SHA256Digest, SHA1Digest, SHA1NSEC3Digest, dnsAnchors, anchors, DnsRegistrar, DNSSEC, dnssec, registrar, owner, rsasha256, rsasha1, sha256digest, sha1digest, sha1nsec3digest;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            namehash = function _ref2(name) {
              var node = '0x0000000000000000000000000000000000000000000000000000000000000000';

              if (name !== '') {
                var labels = name.split('.');

                for (var i = labels.length - 1; i >= 0; i--) {
                  node = sha3(node + sha3(labels[i]).slice(2), {
                    encoding: 'hex'
                  });
                }
              }

              return node.toString();
            };

            deploy = function _ref(contractJSON) {
              var contract = new web3.eth.Contract(contractJSON.abi);

              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }

              return contract.deploy({
                data: contractJSON.bytecode,
                arguments: args
              }).send({
                from: accounts[0],
                gas: 6700000
              });
            };

            sha3 = web3.utils.sha3;
            RSASHA256Algorithm = (0, _utils.loadContract)('dnssec-oracle', 'RSASHA256Algorithm');
            RSASHA1Algorithm = (0, _utils.loadContract)('dnssec-oracle', 'RSASHA1Algorithm');
            SHA256Digest = (0, _utils.loadContract)('dnssec-oracle', 'SHA256Digest');
            SHA1Digest = (0, _utils.loadContract)('dnssec-oracle', 'SHA1Digest');
            SHA1NSEC3Digest = (0, _utils.loadContract)('dnssec-oracle', 'SHA1NSEC3Digest');
            dnsAnchors = require('@ensdomains/dnssec-oracle-anchors');
            anchors = dnsAnchors.realEntries;
            DnsRegistrar = (0, _utils.loadContract)('dnsregistrar', 'DNSRegistrar');
            DNSSEC = (0, _utils.loadContract)('dnssec-oracle', 'DNSSECImpl');
            /* Deploy the main contracts  */

            _context.next = 14;
            return deploy(DNSSEC, dnsAnchors.encode(anchors));

          case 14:
            dnssec = _context.sent;
            _context.next = 17;
            return deploy(DnsRegistrar, dnssec._address, ens._address);

          case 17:
            registrar = _context.sent;
            _context.next = 20;
            return ens.methods.setSubnodeOwner(ROOT_NODE, sha3('xyz'), registrar._address).send({
              from: accounts[0]
            });

          case 20:
            _context.next = 22;
            return ens.methods.owner(namehash('xyz')).call();

          case 22:
            owner = _context.sent;
            _context.next = 25;
            return deploy(RSASHA256Algorithm);

          case 25:
            rsasha256 = _context.sent;
            _context.next = 28;
            return deploy(RSASHA1Algorithm);

          case 28:
            rsasha1 = _context.sent;
            _context.next = 31;
            return deploy(SHA256Digest);

          case 31:
            sha256digest = _context.sent;
            _context.next = 34;
            return deploy(SHA1Digest);

          case 34:
            sha1digest = _context.sent;
            _context.next = 37;
            return deploy(SHA1NSEC3Digest);

          case 37:
            sha1nsec3digest = _context.sent;
            console.log('DNSSSC ORACLE contract is deployed at ', dnssec._address);
            console.log('DNSregistrar contract is deployed at ', registrar._address);
            console.log('The owner of xyz doamin is ', owner);
            _context.next = 43;
            return dnssec.methods.setAlgorithm(5, rsasha1._address).send({
              from: accounts[0]
            });

          case 43:
            _context.next = 45;
            return dnssec.methods.setAlgorithm(7, rsasha1._address).send({
              from: accounts[0]
            });

          case 45:
            _context.next = 47;
            return dnssec.methods.setAlgorithm(8, rsasha256._address).send({
              from: accounts[0]
            });

          case 47:
            _context.next = 49;
            return dnssec.methods.setDigest(1, sha1digest._address).send({
              from: accounts[0]
            });

          case 49:
            _context.next = 51;
            return dnssec.methods.setDigest(2, sha256digest._address).send({
              from: accounts[0]
            });

          case 51:
            _context.next = 53;
            return dnssec.methods.setNSEC3Digest(1, sha1nsec3digest._address).send({
              from: accounts[0]
            });

          case 53:
            return _context.abrupt("return", {
              dnssec: dnssec
            });

          case 54:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _deployDNSSEC.apply(this, arguments);
}

var _default = deployDNSSEC;
exports["default"] = _default;